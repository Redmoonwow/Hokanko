

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Dec 27 10:06:41 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	12F683
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 1.40
    20                           ; Generated 01/12/2016 GMT
    21                           ; 
    22                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC12F683 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  000A                     	;# 
    60  000B                     	;# 
    61  000C                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0013                     	;# 
    70  0014                     	;# 
    71  0015                     	;# 
    72  0018                     	;# 
    73  0019                     	;# 
    74  001A                     	;# 
    75  001E                     	;# 
    76  001F                     	;# 
    77  0081                     	;# 
    78  0085                     	;# 
    79  008C                     	;# 
    80  008E                     	;# 
    81  008F                     	;# 
    82  0090                     	;# 
    83  0092                     	;# 
    84  0095                     	;# 
    85  0095                     	;# 
    86  0096                     	;# 
    87  0096                     	;# 
    88  0099                     	;# 
    89  009A                     	;# 
    90  009A                     	;# 
    91  009B                     	;# 
    92  009C                     	;# 
    93  009D                     	;# 
    94  009E                     	;# 
    95  009F                     	;# 
    96  001F                     _ADCON0	set	31
    97  001F                     _ADCON0bits	set	31
    98  001E                     _ADRESH	set	30
    99  0005                     _GPIObits	set	5
   100  000B                     _INTCONbits	set	11
   101  000C                     _PIR1bits	set	12
   102  0001                     _TMR0	set	1
   103  009E                     _ADRESL	set	158
   104  009F                     _ANSEL	set	159
   105  0081                     _OPTION_REG	set	129
   106  008F                     _OSCCON	set	143
   107  008C                     _PIE1bits	set	140
   108  0085                     _TRISIO	set	133
   109                           
   110                           ; #config settings
   111  0000                     
   112                           	psect	cinit
   113  0010                     start_initialization:	
   114  0010                     __initialization:	
   115                           
   116                           ; Clear objects allocated to COMMON
   117  0010  3070               	movlw	low __pbssCOMMON
   118  0011  0084               	movwf	4
   119  0012  3076               	movlw	low (__pbssCOMMON+6)
   120  0013  21FF               	fcall	clear_ram0
   121                           
   122                           ; Clear objects allocated to BANK0
   123  0014  1383               	bcf	3,7	;select IRP bank0
   124  0015  3020               	movlw	low __pbssBANK0
   125  0016  0084               	movwf	4
   126  0017  3032               	movlw	low (__pbssBANK0+18)
   127  0018  21FF               	fcall	clear_ram0
   128  0019                     end_of_initialization:	
   129                           ;End of C runtime variable initialization code
   130                           
   131  0019                     __end_of__initialization:	
   132  0019  0183               	clrf	3
   133  001A  281B               	ljmp	_main	;jump to C main() function
   134                           
   135                           	psect	bssCOMMON
   136  0070                     __pbssCOMMON:	
   137  0070                     _ADC_STEP:	
   138  0070                     	ds	2
   139  0072                     _R_DANGER:	
   140  0072                     	ds	2
   141  0074                     _STEP:	
   142  0074                     	ds	2
   143                           
   144                           	psect	bssBANK0
   145  0020                     __pbssBANK0:	
   146  0020                     _GL_CH:	
   147  0020                     	ds	2
   148  0022                     _RED_STEP:	
   149  0022                     	ds	2
   150  0024                     _REF_DATA:	
   151  0024                     	ds	2
   152  0026                     _R_ERROR:	
   153  0026                     	ds	2
   154  0028                     _SEC:	
   155  0028                     	ds	2
   156  002A                     _SENSOR_DATA:	
   157  002A                     	ds	2
   158  002C                     _TMR0_NOW:	
   159  002C                     	ds	2
   160  002E                     _Y_DANGER:	
   161  002E                     	ds	2
   162  0030                     _Y_ERROR:	
   163  0030                     	ds	2
   164                           
   165                           	psect	clrtext
   166  01FF                     clear_ram0:	
   167                           ;	Called with FSR containing the base address, and
   168                           ;	W with the last address+1
   169                           
   170  01FF  0064               	clrwdt	;clear the watchdog before getting into this loop
   171  0200                     clrloop0:	
   172  0200  0180               	clrf	0	;clear RAM location pointed to by FSR
   173  0201  0A84               	incf	4,f	;increment pointer
   174  0202  0604               	xorwf	4,w	;XOR with final address
   175  0203  1903               	btfsc	3,2	;have we reached the end yet?
   176  0204  3400               	retlw	0	;all done for this memory range, return
   177  0205  0604               	xorwf	4,w	;XOR again to restore value
   178  0206  2A00               	goto	clrloop0	;do the next byte
   179                           
   180                           	psect	cstackCOMMON
   181  0076                     __pcstackCOMMON:	
   182  0076                     ?_CHECKTEMP:	
   183  0076                     ?_FINALCHECKTEMP:	
   184                           ; 1 bytes @ 0x0
   185                           
   186  0076                     ?_ISR:	
   187                           ; 1 bytes @ 0x0
   188                           
   189  0076                     ??_ISR:	
   190                           ; 1 bytes @ 0x0
   191                           
   192  0076                     ?_main:	
   193                           ; 1 bytes @ 0x0
   194                           
   195                           
   196                           ; 1 bytes @ 0x0
   197  0076                     	ds	4
   198  007A                     ??_ADCONV:	
   199  007A                     ??_SECSTART_64:	
   200                           ; 1 bytes @ 0x4
   201                           
   202  007A                     ??_main:	
   203                           ; 1 bytes @ 0x4
   204                           
   205                           
   206                           	psect	cstackBANK0
   207  0032                     __pcstackBANK0:	
   208                           ; 1 bytes @ 0x4
   209                           
   210  0032                     ?_ADCONV:	
   211  0032                     ??_FINALCHECKTEMP:	
   212                           ; 1 bytes @ 0x0
   213                           
   214  0032                     ?_SECSTART_64:	
   215                           ; 1 bytes @ 0x0
   216                           
   217  0032                     ADCONV@CH:	
   218                           ; 1 bytes @ 0x0
   219                           
   220  0032                     SECSTART_64@TMR0_CNT:	
   221                           ; 2 bytes @ 0x0
   222                           
   223                           
   224                           ; 2 bytes @ 0x0
   225  0032                     	ds	2
   226  0034                     ??_CHECKTEMP:	
   227                           
   228                           ; 1 bytes @ 0x2
   229  0034                     	ds	1
   230                           
   231                           	psect	maintext
   232  001B                     __pmaintext:	
   233 ;;
   234 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   235 ;;
   236 ;; *************** function _main *****************
   237 ;; Defined at:
   238 ;;		line 56 in file "main.c"
   239 ;; Parameters:    Size  Location     Type
   240 ;;		None
   241 ;; Auto vars:     Size  Location     Type
   242 ;;		None
   243 ;; Return value:  Size  Location     Type
   244 ;;                  1    wreg      void 
   245 ;; Registers used:
   246 ;;		wreg, status,2, status,0, pclath, cstack
   247 ;; Tracked objects:
   248 ;;		On entry : B00/0
   249 ;;		On exit  : 0/0
   250 ;;		Unchanged: 0/0
   251 ;; Data sizes:     COMMON   BANK0   BANK1
   252 ;;      Params:         0       0       0
   253 ;;      Locals:         0       0       0
   254 ;;      Temps:          0       0       0
   255 ;;      Totals:         0       0       0
   256 ;;Total ram usage:        0 bytes
   257 ;; Hardware stack levels required when called:    3
   258 ;; This function calls:
   259 ;;		_ADCONV
   260 ;;		_CHECKTEMP
   261 ;;		_FINALCHECKTEMP
   262 ;;		_SECSTART_64
   263 ;; This function is called by:
   264 ;;		Startup code after reset
   265 ;; This function uses a non-reentrant model
   266 ;;
   267                           
   268                           
   269                           ;psect for function _main
   270  001B                     _main:	
   271                           
   272                           ;main.c: 59: OSCCON = 0b00000001;
   273                           
   274                           ;incstack = 0
   275                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   276  001B  3001               	movlw	1
   277  001C  1683               	bsf	3,5	;RP0=1, select bank1
   278  001D  008F               	movwf	15	;volatile
   279                           
   280                           ;main.c: 60: OPTION_REG = 0b00000101;
   281  001E  3005               	movlw	5
   282  001F  0081               	movwf	1	;volatile
   283                           
   284                           ;main.c: 61: ADCON0 = 0b10000000;
   285  0020  3080               	movlw	128
   286  0021  1283               	bcf	3,5	;RP0=0, select bank0
   287  0022  009F               	movwf	31	;volatile
   288                           
   289                           ;main.c: 62: ANSEL = 0b00110011;
   290  0023  3033               	movlw	51
   291  0024  1683               	bsf	3,5	;RP0=1, select bank1
   292  0025  009F               	movwf	31	;volatile
   293                           
   294                           ;main.c: 63: INTCONbits.GIE =0;
   295  0026  138B               	bcf	11,7	;volatile
   296                           
   297                           ;main.c: 64: INTCONbits.T0IF = 0;
   298  0027  110B               	bcf	11,2	;volatile
   299                           
   300                           ;main.c: 65: INTCONbits.T0IE =0;
   301  0028  128B               	bcf	11,5	;volatile
   302                           
   303                           ;main.c: 66: INTCONbits.PEIE = 0;
   304  0029  130B               	bcf	11,6	;volatile
   305                           
   306                           ;main.c: 67: PIE1bits.ADIE =0;
   307  002A  130C               	bcf	12,6	;volatile
   308                           
   309                           ;main.c: 68: PIR1bits.ADIF = 0;
   310  002B  1283               	bcf	3,5	;RP0=0, select bank0
   311  002C  130C               	bcf	12,6	;volatile
   312                           
   313                           ;main.c: 69: TRISIO = 0b00000111;
   314  002D  3007               	movlw	7
   315  002E  1683               	bsf	3,5	;RP0=1, select bank1
   316  002F  0085               	movwf	5	;volatile
   317                           
   318                           ;main.c: 71: SEC = 0;
   319  0030  1283               	bcf	3,5	;RP0=0, select bank0
   320  0031  01A8               	clrf	_SEC
   321  0032  01A9               	clrf	_SEC+1
   322                           
   323                           ;main.c: 72: STEP = 0;
   324  0033  01F4               	clrf	_STEP
   325  0034  01F5               	clrf	_STEP+1
   326                           
   327                           ;main.c: 73: RED_STEP = 0;
   328  0035  01A2               	clrf	_RED_STEP
   329  0036  01A3               	clrf	_RED_STEP+1
   330                           
   331                           ;main.c: 74: ADC_STEP = 0;
   332  0037  01F0               	clrf	_ADC_STEP
   333  0038  01F1               	clrf	_ADC_STEP+1
   334                           
   335                           ;main.c: 75: REF_DATA = 0;
   336  0039  01A4               	clrf	_REF_DATA
   337  003A  01A5               	clrf	_REF_DATA+1
   338                           
   339                           ;main.c: 76: SENSOR_DATA = 0;
   340  003B  01AA               	clrf	_SENSOR_DATA
   341  003C  01AB               	clrf	_SENSOR_DATA+1
   342                           
   343                           ;main.c: 77: TMR0_NOW = 0;
   344  003D  01AC               	clrf	_TMR0_NOW
   345  003E  01AD               	clrf	_TMR0_NOW+1
   346                           
   347                           ;main.c: 78: GPIObits.GP5=0;
   348  003F  1285               	bcf	5,5	;volatile
   349                           
   350                           ;main.c: 79: GPIObits.GP4=0;
   351  0040  1205               	bcf	5,4	;volatile
   352                           
   353                           ;main.c: 80: Y_ERROR = 0;
   354  0041  01B0               	clrf	_Y_ERROR
   355  0042  01B1               	clrf	_Y_ERROR+1
   356                           
   357                           ;main.c: 81: R_ERROR = 0;
   358  0043  01A6               	clrf	_R_ERROR
   359  0044  01A7               	clrf	_R_ERROR+1
   360  0045                     l1107:	
   361                           ;main.c: 83: for(;;){
   362                           
   363                           
   364                           ;main.c: 86: if(STEP == 0 && ADC_STEP == 0 && Y_ERROR == 0 && TMR0_NOW == 0 && R_DANGER 
      +                          == 0){
   365  0045  0874               	movf	_STEP,w
   366  0046  0475               	iorwf	_STEP+1,w
   367  0047  1D03               	btfss	3,2
   368  0048  2866               	goto	l1121
   369  0049  0870               	movf	_ADC_STEP,w
   370  004A  0471               	iorwf	_ADC_STEP+1,w
   371  004B  1D03               	btfss	3,2
   372  004C  2866               	goto	l1121
   373  004D  0830               	movf	_Y_ERROR,w
   374  004E  0431               	iorwf	_Y_ERROR+1,w
   375  004F  1D03               	btfss	3,2
   376  0050  2866               	goto	l1121
   377  0051  082C               	movf	_TMR0_NOW,w
   378  0052  042D               	iorwf	_TMR0_NOW+1,w
   379  0053  1D03               	btfss	3,2
   380  0054  2866               	goto	l1121
   381  0055  0872               	movf	_R_DANGER,w
   382  0056  0473               	iorwf	_R_DANGER+1,w
   383  0057  1D03               	btfss	3,2
   384  0058  2866               	goto	l1121
   385                           
   386                           ;main.c: 87: STEP = STEP + 1;
   387  0059  0874               	movf	_STEP,w
   388  005A  3E01               	addlw	1
   389  005B  00F4               	movwf	_STEP
   390  005C  0875               	movf	_STEP+1,w
   391  005D  1803               	skipnc
   392  005E  3E01               	addlw	1
   393  005F  3E00               	addlw	0
   394  0060  00F5               	movwf	_STEP+1
   395                           
   396                           ;main.c: 88: ADCONV(1);
   397  0061  3001               	movlw	1
   398  0062  00B2               	movwf	ADCONV@CH
   399  0063  3000               	movlw	0
   400  0064  00B3               	movwf	ADCONV@CH+1
   401  0065  21BB               	fcall	_ADCONV
   402  0066                     l1121:	
   403                           
   404                           ;main.c: 89: }
   405                           ;main.c: 91: if(STEP == 1 && ADC_STEP == 0 && TMR0_NOW == 0 && R_DANGER == 0){
   406  0066  0374               	decf	_STEP,w
   407  0067  0475               	iorwf	_STEP+1,w
   408  0068  1D03               	btfss	3,2
   409  0069  2883               	goto	l1133
   410  006A  0870               	movf	_ADC_STEP,w
   411  006B  0471               	iorwf	_ADC_STEP+1,w
   412  006C  1D03               	btfss	3,2
   413  006D  2883               	goto	l1133
   414  006E  1283               	bcf	3,5	;RP0=0, select bank0
   415  006F  082C               	movf	_TMR0_NOW,w
   416  0070  042D               	iorwf	_TMR0_NOW+1,w
   417  0071  1D03               	btfss	3,2
   418  0072  2883               	goto	l1133
   419  0073  0872               	movf	_R_DANGER,w
   420  0074  0473               	iorwf	_R_DANGER+1,w
   421  0075  1D03               	btfss	3,2
   422  0076  2883               	goto	l1133
   423                           
   424                           ;main.c: 92: STEP = STEP + 1;
   425  0077  0874               	movf	_STEP,w
   426  0078  3E01               	addlw	1
   427  0079  00F4               	movwf	_STEP
   428  007A  0875               	movf	_STEP+1,w
   429  007B  1803               	skipnc
   430  007C  3E01               	addlw	1
   431  007D  3E00               	addlw	0
   432  007E  00F5               	movwf	_STEP+1
   433                           
   434                           ;main.c: 93: ADCONV(0);
   435  007F  3000               	movlw	0
   436  0080  00B2               	movwf	ADCONV@CH
   437  0081  00B3               	movwf	ADCONV@CH+1
   438  0082  21BB               	fcall	_ADCONV
   439  0083                     l1133:	
   440                           
   441                           ;main.c: 94: }
   442                           ;main.c: 96: if(STEP == 2 && ADC_STEP == 0 && TMR0_NOW == 0 && R_DANGER == 0){
   443  0083  3002               	movlw	2
   444  0084  0674               	xorwf	_STEP,w
   445  0085  0475               	iorwf	_STEP+1,w
   446  0086  1D03               	btfss	3,2
   447  0087  2896               	goto	l1143
   448  0088  0870               	movf	_ADC_STEP,w
   449  0089  0471               	iorwf	_ADC_STEP+1,w
   450  008A  1D03               	btfss	3,2
   451  008B  2896               	goto	l1143
   452  008C  1283               	bcf	3,5	;RP0=0, select bank0
   453  008D  082C               	movf	_TMR0_NOW,w
   454  008E  042D               	iorwf	_TMR0_NOW+1,w
   455  008F  1D03               	btfss	3,2
   456  0090  2896               	goto	l1143
   457  0091  0872               	movf	_R_DANGER,w
   458  0092  0473               	iorwf	_R_DANGER+1,w
   459  0093  1D03               	btfss	3,2
   460  0094  2896               	goto	l1143
   461                           
   462                           ;main.c: 97: CHECKTEMP();
   463  0095  2164               	fcall	_CHECKTEMP
   464  0096                     l1143:	
   465                           
   466                           ;main.c: 98: }
   467                           ;main.c: 100: if(STEP == 3 && ADC_STEP == 0 && SEC == 1 && TMR0_NOW == 0 && R_DANGER == 
      +                          0){
   468  0096  3003               	movlw	3
   469  0097  0674               	xorwf	_STEP,w
   470  0098  0475               	iorwf	_STEP+1,w
   471  0099  1D03               	btfss	3,2
   472  009A  28BB               	goto	l1159
   473  009B  0870               	movf	_ADC_STEP,w
   474  009C  0471               	iorwf	_ADC_STEP+1,w
   475  009D  1D03               	btfss	3,2
   476  009E  28BB               	goto	l1159
   477  009F  1283               	bcf	3,5	;RP0=0, select bank0
   478  00A0  0328               	decf	_SEC,w
   479  00A1  0429               	iorwf	_SEC+1,w
   480  00A2  1D03               	btfss	3,2
   481  00A3  28BB               	goto	l1159
   482  00A4  082C               	movf	_TMR0_NOW,w
   483  00A5  042D               	iorwf	_TMR0_NOW+1,w
   484  00A6  1D03               	btfss	3,2
   485  00A7  28BB               	goto	l1159
   486  00A8  0872               	movf	_R_DANGER,w
   487  00A9  0473               	iorwf	_R_DANGER+1,w
   488  00AA  1D03               	btfss	3,2
   489  00AB  28BB               	goto	l1159
   490                           
   491                           ;main.c: 101: SEC = 0;
   492  00AC  01A8               	clrf	_SEC
   493  00AD  01A9               	clrf	_SEC+1
   494                           
   495                           ;main.c: 102: STEP = STEP + 1;
   496  00AE  0874               	movf	_STEP,w
   497  00AF  3E01               	addlw	1
   498  00B0  00F4               	movwf	_STEP
   499  00B1  0875               	movf	_STEP+1,w
   500  00B2  1803               	skipnc
   501  00B3  3E01               	addlw	1
   502  00B4  3E00               	addlw	0
   503  00B5  00F5               	movwf	_STEP+1
   504                           
   505                           ;main.c: 103: ADCONV(1);
   506  00B6  3001               	movlw	1
   507  00B7  00B2               	movwf	ADCONV@CH
   508  00B8  3000               	movlw	0
   509  00B9  00B3               	movwf	ADCONV@CH+1
   510  00BA  21BB               	fcall	_ADCONV
   511  00BB                     l1159:	
   512                           
   513                           ;main.c: 104: }
   514                           ;main.c: 106: if(STEP == 4 && ADC_STEP == 0 && TMR0_NOW == 0 && R_DANGER == 0){
   515  00BB  3004               	movlw	4
   516  00BC  0674               	xorwf	_STEP,w
   517  00BD  0475               	iorwf	_STEP+1,w
   518  00BE  1D03               	btfss	3,2
   519  00BF  28D9               	goto	l1171
   520  00C0  0870               	movf	_ADC_STEP,w
   521  00C1  0471               	iorwf	_ADC_STEP+1,w
   522  00C2  1D03               	btfss	3,2
   523  00C3  28D9               	goto	l1171
   524  00C4  1283               	bcf	3,5	;RP0=0, select bank0
   525  00C5  082C               	movf	_TMR0_NOW,w
   526  00C6  042D               	iorwf	_TMR0_NOW+1,w
   527  00C7  1D03               	btfss	3,2
   528  00C8  28D9               	goto	l1171
   529  00C9  0872               	movf	_R_DANGER,w
   530  00CA  0473               	iorwf	_R_DANGER+1,w
   531  00CB  1D03               	btfss	3,2
   532  00CC  28D9               	goto	l1171
   533                           
   534                           ;main.c: 107: STEP = STEP + 1;
   535  00CD  0874               	movf	_STEP,w
   536  00CE  3E01               	addlw	1
   537  00CF  00F4               	movwf	_STEP
   538  00D0  0875               	movf	_STEP+1,w
   539  00D1  1803               	skipnc
   540  00D2  3E01               	addlw	1
   541  00D3  3E00               	addlw	0
   542  00D4  00F5               	movwf	_STEP+1
   543                           
   544                           ;main.c: 108: ADCONV(0);
   545  00D5  3000               	movlw	0
   546  00D6  00B2               	movwf	ADCONV@CH
   547  00D7  00B3               	movwf	ADCONV@CH+1
   548  00D8  21BB               	fcall	_ADCONV
   549  00D9                     l1171:	
   550                           
   551                           ;main.c: 109: }
   552                           ;main.c: 111: if(STEP == 5 && ADC_STEP == 0 && R_DANGER == 0){
   553  00D9  3005               	movlw	5
   554  00DA  0674               	xorwf	_STEP,w
   555  00DB  0475               	iorwf	_STEP+1,w
   556  00DC  1D03               	btfss	3,2
   557  00DD  28E7               	goto	l1179
   558  00DE  0870               	movf	_ADC_STEP,w
   559  00DF  0471               	iorwf	_ADC_STEP+1,w
   560  00E0  1D03               	btfss	3,2
   561  00E1  28E7               	goto	l1179
   562  00E2  0872               	movf	_R_DANGER,w
   563  00E3  0473               	iorwf	_R_DANGER+1,w
   564  00E4  1D03               	btfss	3,2
   565  00E5  28E7               	goto	l1179
   566                           
   567                           ;main.c: 112: FINALCHECKTEMP();
   568  00E6  2193               	fcall	_FINALCHECKTEMP
   569  00E7                     l1179:	
   570                           
   571                           ;main.c: 113: }
   572                           ;main.c: 119: if(GPIObits.GP2==1 && R_ERROR == 0 && RED_STEP == 0 && TMR0_NOW == 0 && Y_
      +                          DANGER == 0){
   573  00E7  1283               	bcf	3,5	;RP0=0, select bank0
   574  00E8  1D05               	btfss	5,2	;volatile
   575  00E9  290B               	goto	l1195
   576  00EA  0826               	movf	_R_ERROR,w
   577  00EB  0427               	iorwf	_R_ERROR+1,w
   578  00EC  1D03               	btfss	3,2
   579  00ED  290B               	goto	l1195
   580  00EE  0822               	movf	_RED_STEP,w
   581  00EF  0423               	iorwf	_RED_STEP+1,w
   582  00F0  1D03               	btfss	3,2
   583  00F1  290B               	goto	l1195
   584  00F2  082C               	movf	_TMR0_NOW,w
   585  00F3  042D               	iorwf	_TMR0_NOW+1,w
   586  00F4  1D03               	btfss	3,2
   587  00F5  290B               	goto	l1195
   588  00F6  082E               	movf	_Y_DANGER,w
   589  00F7  042F               	iorwf	_Y_DANGER+1,w
   590  00F8  1D03               	btfss	3,2
   591  00F9  290B               	goto	l1195
   592                           
   593                           ;main.c: 120: R_DANGER = 1;
   594  00FA  3001               	movlw	1
   595  00FB  00F2               	movwf	_R_DANGER
   596  00FC  3000               	movlw	0
   597  00FD  00F3               	movwf	_R_DANGER+1
   598                           
   599                           ;main.c: 121: RED_STEP = RED_STEP + 1;
   600  00FE  0822               	movf	_RED_STEP,w
   601  00FF  3E01               	addlw	1
   602  0100  00A2               	movwf	_RED_STEP
   603  0101  0823               	movf	_RED_STEP+1,w
   604  0102  1803               	skipnc
   605  0103  3E01               	addlw	1
   606  0104  3E00               	addlw	0
   607  0105  00A3               	movwf	_RED_STEP+1
   608                           
   609                           ;main.c: 122: SECSTART_64(134);
   610  0106  3086               	movlw	134
   611  0107  00B2               	movwf	SECSTART_64@TMR0_CNT
   612  0108  3000               	movlw	0
   613  0109  00B3               	movwf	SECSTART_64@TMR0_CNT+1
   614  010A  21F0               	fcall	_SECSTART_64
   615  010B                     l1195:	
   616                           
   617                           ;main.c: 123: }
   618                           ;main.c: 125: if(RED_STEP == 1 && SEC == 1 && GPIObits.GP2==1){
   619  010B  1283               	bcf	3,5	;RP0=0, select bank0
   620  010C  0322               	decf	_RED_STEP,w
   621  010D  0423               	iorwf	_RED_STEP+1,w
   622  010E  1D03               	btfss	3,2
   623  010F  2920               	goto	l1209
   624  0110  0328               	decf	_SEC,w
   625  0111  0429               	iorwf	_SEC+1,w
   626  0112  1903               	btfsc	3,2
   627  0113  1D05               	btfss	5,2	;volatile
   628  0114  2920               	goto	l1209
   629                           
   630                           ;main.c: 126: GPIObits.GP4=1;
   631  0115  1605               	bsf	5,4	;volatile
   632                           
   633                           ;main.c: 127: RED_STEP = 0;
   634  0116  01A2               	clrf	_RED_STEP
   635  0117  01A3               	clrf	_RED_STEP+1
   636                           
   637                           ;main.c: 128: SEC = 0;
   638  0118  01A8               	clrf	_SEC
   639  0119  01A9               	clrf	_SEC+1
   640                           
   641                           ;main.c: 129: R_ERROR = 1;
   642  011A  3001               	movlw	1
   643  011B  00A6               	movwf	_R_ERROR
   644  011C  3000               	movlw	0
   645  011D  00A7               	movwf	_R_ERROR+1
   646                           
   647                           ;main.c: 130: R_DANGER = 0;
   648  011E  01F2               	clrf	_R_DANGER
   649  011F  01F3               	clrf	_R_DANGER+1
   650  0120                     l1209:	
   651                           
   652                           ;main.c: 131: }
   653                           ;main.c: 133: if(RED_STEP == 1 && SEC == 1 && GPIObits.GP2==0){
   654  0120  0322               	decf	_RED_STEP,w
   655  0121  0423               	iorwf	_RED_STEP+1,w
   656  0122  1D03               	btfss	3,2
   657  0123  292F               	goto	l1217
   658  0124  0328               	decf	_SEC,w
   659  0125  0429               	iorwf	_SEC+1,w
   660  0126  1903               	btfsc	3,2
   661  0127  1905               	btfsc	5,2	;volatile
   662  0128  292F               	goto	l1217
   663                           
   664                           ;main.c: 134: RED_STEP = 0;
   665  0129  01A2               	clrf	_RED_STEP
   666  012A  01A3               	clrf	_RED_STEP+1
   667                           
   668                           ;main.c: 135: SEC = 0;
   669  012B  01A8               	clrf	_SEC
   670  012C  01A9               	clrf	_SEC+1
   671                           
   672                           ;main.c: 136: R_DANGER = 0;
   673  012D  01F2               	clrf	_R_DANGER
   674  012E  01F3               	clrf	_R_DANGER+1
   675  012F                     l1217:	
   676                           
   677                           ;main.c: 137: }
   678                           ;main.c: 142: if(ADC_STEP == 1 && R_DANGER == 0){
   679  012F  0370               	decf	_ADC_STEP,w
   680  0130  0471               	iorwf	_ADC_STEP+1,w
   681  0131  1D03               	btfss	3,2
   682  0132  2940               	goto	l74
   683  0133  0872               	movf	_R_DANGER,w
   684  0134  0473               	iorwf	_R_DANGER+1,w
   685  0135  1D03               	btfss	3,2
   686  0136  2940               	goto	l74
   687                           
   688                           ;main.c: 143: ADC_STEP = ADC_STEP + 1;
   689  0137  0870               	movf	_ADC_STEP,w
   690  0138  3E01               	addlw	1
   691  0139  00F0               	movwf	_ADC_STEP
   692  013A  0871               	movf	_ADC_STEP+1,w
   693  013B  1803               	skipnc
   694  013C  3E01               	addlw	1
   695  013D  3E00               	addlw	0
   696  013E  00F1               	movwf	_ADC_STEP+1
   697                           
   698                           ;main.c: 144: ADCON0bits.GO = 1;
   699  013F  149F               	bsf	31,1	;volatile
   700  0140                     l74:	
   701                           
   702                           ;main.c: 145: }
   703                           ;main.c: 147: if(ADC_STEP == 2 && ADCON0bits.GO == 0 && R_DANGER == 0){
   704  0140  3002               	movlw	2
   705  0141  0670               	xorwf	_ADC_STEP,w
   706  0142  0471               	iorwf	_ADC_STEP+1,w
   707  0143  1903               	btfsc	3,2
   708  0144  189F               	btfsc	31,1	;volatile
   709  0145  2845               	goto	l1107
   710  0146  0872               	movf	_R_DANGER,w
   711  0147  0473               	iorwf	_R_DANGER+1,w
   712  0148  1D03               	btfss	3,2
   713  0149  2845               	goto	l1107
   714                           
   715                           ;main.c: 148: if(GL_CH == 1){
   716  014A  0320               	decf	_GL_CH,w
   717  014B  0421               	iorwf	_GL_CH+1,w
   718  014C  1D03               	btfss	3,2
   719  014D  2954               	goto	l1233
   720                           
   721                           ;main.c: 149: REF_DATA = ADRESL+(ADRESH*256);
   722  014E  081E               	movf	30,w	;volatile
   723  014F  00A5               	movwf	_REF_DATA+1
   724  0150  1683               	bsf	3,5	;RP0=1, select bank1
   725  0151  081E               	movf	30,w	;volatile
   726  0152  1283               	bcf	3,5	;RP0=0, select bank0
   727  0153  00A4               	movwf	_REF_DATA
   728  0154                     l1233:	
   729                           
   730                           ;main.c: 151: }
   731                           ;main.c: 153: if(GL_CH == 0){
   732  0154  0820               	movf	_GL_CH,w
   733  0155  0421               	iorwf	_GL_CH+1,w
   734  0156  1D03               	btfss	3,2
   735  0157  295E               	goto	l1237
   736                           
   737                           ;main.c: 154: SENSOR_DATA = ADRESL+(ADRESH*256);
   738  0158  081E               	movf	30,w	;volatile
   739  0159  00AB               	movwf	_SENSOR_DATA+1
   740  015A  1683               	bsf	3,5	;RP0=1, select bank1
   741  015B  081E               	movf	30,w	;volatile
   742  015C  1283               	bcf	3,5	;RP0=0, select bank0
   743  015D  00AA               	movwf	_SENSOR_DATA
   744  015E                     l1237:	
   745                           
   746                           ;main.c: 155: }
   747                           ;main.c: 157: ADCON0bits.ADON = 0;
   748  015E  101F               	bcf	31,0	;volatile
   749                           
   750                           ;main.c: 158: ADC_STEP = 0;
   751  015F  01F0               	clrf	_ADC_STEP
   752  0160  01F1               	clrf	_ADC_STEP+1
   753                           
   754                           ;main.c: 159: SEC = 0;
   755  0161  01A8               	clrf	_SEC
   756  0162  01A9               	clrf	_SEC+1
   757                           
   758                           ;main.c: 161: }
   759                           ;main.c: 164: }
   760  0163  2845               	goto	l1107
   761  0164                     __end_of_main:	
   762                           ;main.c: 166: return;
   763                           
   764                           
   765                           	psect	text1
   766  0193                     __ptext1:	
   767 ;; *************** function _FINALCHECKTEMP *****************
   768 ;; Defined at:
   769 ;;		line 201 in file "main.c"
   770 ;; Parameters:    Size  Location     Type
   771 ;;		None
   772 ;; Auto vars:     Size  Location     Type
   773 ;;		None
   774 ;; Return value:  Size  Location     Type
   775 ;;                  1    wreg      void 
   776 ;; Registers used:
   777 ;;		wreg, status,2
   778 ;; Tracked objects:
   779 ;;		On entry : 0/0
   780 ;;		On exit  : 0/0
   781 ;;		Unchanged: 0/0
   782 ;; Data sizes:     COMMON   BANK0   BANK1
   783 ;;      Params:         0       0       0
   784 ;;      Locals:         0       0       0
   785 ;;      Temps:          0       1       0
   786 ;;      Totals:         0       1       0
   787 ;;Total ram usage:        1 bytes
   788 ;; Hardware stack levels used:    1
   789 ;; Hardware stack levels required when called:    1
   790 ;; This function calls:
   791 ;;		Nothing
   792 ;; This function is called by:
   793 ;;		_main
   794 ;; This function uses a non-reentrant model
   795 ;;
   796                           
   797                           
   798                           ;psect for function _FINALCHECKTEMP
   799  0193                     _FINALCHECKTEMP:	
   800                           
   801                           ;main.c: 202: if(SENSOR_DATA >= REF_DATA){
   802                           
   803                           ;incstack = 0
   804                           ; Regs used in _FINALCHECKTEMP: [wreg+status,2]
   805  0193  1283               	bcf	3,5	;RP0=0, select bank0
   806  0194  082B               	movf	_SENSOR_DATA+1,w
   807  0195  3A80               	xorlw	128
   808  0196  00B2               	movwf	??_FINALCHECKTEMP
   809  0197  0825               	movf	_REF_DATA+1,w
   810  0198  3A80               	xorlw	128
   811  0199  0232               	subwf	??_FINALCHECKTEMP,w
   812  019A  1D03               	skipz
   813  019B  299E               	goto	u1035
   814  019C  0824               	movf	_REF_DATA,w
   815  019D  022A               	subwf	_SENSOR_DATA,w
   816  019E                     u1035:	
   817  019E  1C03               	skipc
   818  019F  29A5               	goto	l1063
   819                           
   820                           ;main.c: 203: STEP = 0;
   821  01A0  01F4               	clrf	_STEP
   822  01A1  01F5               	clrf	_STEP+1
   823                           
   824                           ;main.c: 204: Y_DANGER = 0;
   825  01A2  1283               	bcf	3,5	;RP0=0, select bank0
   826  01A3  01AE               	clrf	_Y_DANGER
   827  01A4  01AF               	clrf	_Y_DANGER+1
   828  01A5                     l1063:	
   829                           
   830                           ;main.c: 205: }
   831                           ;main.c: 207: if(SENSOR_DATA <= REF_DATA){
   832  01A5  1283               	bcf	3,5	;RP0=0, select bank0
   833  01A6  0825               	movf	_REF_DATA+1,w
   834  01A7  3A80               	xorlw	128
   835  01A8  00B2               	movwf	??_FINALCHECKTEMP
   836  01A9  082B               	movf	_SENSOR_DATA+1,w
   837  01AA  3A80               	xorlw	128
   838  01AB  0232               	subwf	??_FINALCHECKTEMP,w
   839  01AC  1D03               	skipz
   840  01AD  29B0               	goto	u1045
   841  01AE  082A               	movf	_SENSOR_DATA,w
   842  01AF  0224               	subwf	_REF_DATA,w
   843  01B0                     u1045:	
   844  01B0  1C03               	skipc
   845  01B1  0008               	return
   846                           
   847                           ;main.c: 208: GPIObits.GP5=1;
   848  01B2  1283               	bcf	3,5	;RP0=0, select bank0
   849  01B3  1685               	bsf	5,5	;volatile
   850                           
   851                           ;main.c: 209: Y_ERROR = 1;
   852  01B4  3001               	movlw	1
   853  01B5  00B0               	movwf	_Y_ERROR
   854  01B6  3000               	movlw	0
   855  01B7  00B1               	movwf	_Y_ERROR+1
   856                           
   857                           ;main.c: 210: Y_DANGER = 0;
   858  01B8  01AE               	clrf	_Y_DANGER
   859  01B9  01AF               	clrf	_Y_DANGER+1
   860  01BA  0008               	return
   861  01BB                     __end_of_FINALCHECKTEMP:	
   862                           
   863                           	psect	text2
   864  0164                     __ptext2:	
   865 ;; *************** function _CHECKTEMP *****************
   866 ;; Defined at:
   867 ;;		line 189 in file "main.c"
   868 ;; Parameters:    Size  Location     Type
   869 ;;		None
   870 ;; Auto vars:     Size  Location     Type
   871 ;;		None
   872 ;; Return value:  Size  Location     Type
   873 ;;                  1    wreg      void 
   874 ;; Registers used:
   875 ;;		wreg, status,2, status,0, pclath, cstack
   876 ;; Tracked objects:
   877 ;;		On entry : 0/0
   878 ;;		On exit  : 0/0
   879 ;;		Unchanged: 0/0
   880 ;; Data sizes:     COMMON   BANK0   BANK1
   881 ;;      Params:         0       0       0
   882 ;;      Locals:         0       0       0
   883 ;;      Temps:          0       1       0
   884 ;;      Totals:         0       1       0
   885 ;;Total ram usage:        1 bytes
   886 ;; Hardware stack levels used:    1
   887 ;; Hardware stack levels required when called:    2
   888 ;; This function calls:
   889 ;;		_SECSTART_64
   890 ;; This function is called by:
   891 ;;		_main
   892 ;; This function uses a non-reentrant model
   893 ;;
   894                           
   895                           
   896                           ;psect for function _CHECKTEMP
   897  0164                     _CHECKTEMP:	
   898                           
   899                           ;main.c: 190: if(SENSOR_DATA >= REF_DATA){
   900                           
   901                           ;incstack = 0
   902                           ; Regs used in _CHECKTEMP: [wreg+status,2+status,0+pclath+cstack]
   903  0164  1283               	bcf	3,5	;RP0=0, select bank0
   904  0165  082B               	movf	_SENSOR_DATA+1,w
   905  0166  3A80               	xorlw	128
   906  0167  00B4               	movwf	??_CHECKTEMP
   907  0168  0825               	movf	_REF_DATA+1,w
   908  0169  3A80               	xorlw	128
   909  016A  0234               	subwf	??_CHECKTEMP,w
   910  016B  1D03               	skipz
   911  016C  296F               	goto	u1015
   912  016D  0824               	movf	_REF_DATA,w
   913  016E  022A               	subwf	_SENSOR_DATA,w
   914  016F                     u1015:	
   915  016F  1C03               	skipc
   916  0170  2973               	goto	l1051
   917                           
   918                           ;main.c: 191: STEP = 0;
   919  0171  01F4               	clrf	_STEP
   920  0172  01F5               	clrf	_STEP+1
   921  0173                     l1051:	
   922                           
   923                           ;main.c: 192: }
   924                           ;main.c: 194: if(SENSOR_DATA <= REF_DATA){
   925  0173  1283               	bcf	3,5	;RP0=0, select bank0
   926  0174  0825               	movf	_REF_DATA+1,w
   927  0175  3A80               	xorlw	128
   928  0176  00B4               	movwf	??_CHECKTEMP
   929  0177  082B               	movf	_SENSOR_DATA+1,w
   930  0178  3A80               	xorlw	128
   931  0179  0234               	subwf	??_CHECKTEMP,w
   932  017A  1D03               	skipz
   933  017B  297E               	goto	u1025
   934  017C  082A               	movf	_SENSOR_DATA,w
   935  017D  0224               	subwf	_REF_DATA,w
   936  017E                     u1025:	
   937  017E  1C03               	skipc
   938  017F  0008               	return
   939                           
   940                           ;main.c: 195: Y_DANGER = 1;
   941  0180  3001               	movlw	1
   942  0181  1283               	bcf	3,5	;RP0=0, select bank0
   943  0182  00AE               	movwf	_Y_DANGER
   944  0183  3000               	movlw	0
   945  0184  00AF               	movwf	_Y_DANGER+1
   946                           
   947                           ;main.c: 196: STEP = STEP + 1;
   948  0185  0874               	movf	_STEP,w
   949  0186  3E01               	addlw	1
   950  0187  00F4               	movwf	_STEP
   951  0188  0875               	movf	_STEP+1,w
   952  0189  1803               	skipnc
   953  018A  3E01               	addlw	1
   954  018B  3E00               	addlw	0
   955  018C  00F5               	movwf	_STEP+1
   956                           
   957                           ;main.c: 197: SECSTART_64(134);
   958  018D  3086               	movlw	134
   959  018E  00B2               	movwf	SECSTART_64@TMR0_CNT
   960  018F  3000               	movlw	0
   961  0190  00B3               	movwf	SECSTART_64@TMR0_CNT+1
   962  0191  21F0               	fcall	_SECSTART_64
   963  0192  0008               	return
   964  0193                     __end_of_CHECKTEMP:	
   965                           
   966                           	psect	text3
   967  01F0                     __ptext3:	
   968 ;; *************** function _SECSTART_64 *****************
   969 ;; Defined at:
   970 ;;		line 214 in file "main.c"
   971 ;; Parameters:    Size  Location     Type
   972 ;;  TMR0_CNT        2    0[BANK0 ] int 
   973 ;; Auto vars:     Size  Location     Type
   974 ;;		None
   975 ;; Return value:  Size  Location     Type
   976 ;;                  1    wreg      void 
   977 ;; Registers used:
   978 ;;		wreg
   979 ;; Tracked objects:
   980 ;;		On entry : 0/0
   981 ;;		On exit  : 0/0
   982 ;;		Unchanged: 0/0
   983 ;; Data sizes:     COMMON   BANK0   BANK1
   984 ;;      Params:         0       2       0
   985 ;;      Locals:         0       0       0
   986 ;;      Temps:          0       0       0
   987 ;;      Totals:         0       2       0
   988 ;;Total ram usage:        2 bytes
   989 ;; Hardware stack levels used:    1
   990 ;; Hardware stack levels required when called:    1
   991 ;; This function calls:
   992 ;;		Nothing
   993 ;; This function is called by:
   994 ;;		_main
   995 ;;		_CHECKTEMP
   996 ;; This function uses a non-reentrant model
   997 ;;
   998                           
   999                           
  1000                           ;psect for function _SECSTART_64
  1001  01F0                     _SECSTART_64:	
  1002                           
  1003                           ;main.c: 215: TMR0_NOW = 1;
  1004                           
  1005                           ;incstack = 0
  1006                           ; Regs used in _SECSTART_64: [wreg]
  1007  01F0  3001               	movlw	1
  1008  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  1009  01F2  00AC               	movwf	_TMR0_NOW
  1010  01F3  3000               	movlw	0
  1011  01F4  00AD               	movwf	_TMR0_NOW+1
  1012                           
  1013                           ;main.c: 216: OPTION_REG = 0b10000101;
  1014  01F5  3085               	movlw	133
  1015  01F6  1683               	bsf	3,5	;RP0=1, select bank1
  1016  01F7  0081               	movwf	1	;volatile
  1017                           
  1018                           ;main.c: 217: TMR0 = TMR0_CNT;
  1019  01F8  1283               	bcf	3,5	;RP0=0, select bank0
  1020  01F9  0832               	movf	SECSTART_64@TMR0_CNT,w
  1021  01FA  0081               	movwf	1	;volatile
  1022                           
  1023                           ;main.c: 218: INTCONbits.GIE = 1;
  1024  01FB  178B               	bsf	11,7	;volatile
  1025                           
  1026                           ;main.c: 219: INTCONbits.T0IF = 0;
  1027  01FC  110B               	bcf	11,2	;volatile
  1028                           
  1029                           ;main.c: 220: INTCONbits.T0IE = 1;
  1030  01FD  168B               	bsf	11,5	;volatile
  1031  01FE  0008               	return
  1032  01FF                     __end_of_SECSTART_64:	
  1033                           
  1034                           	psect	text4
  1035  01BB                     __ptext4:	
  1036 ;; *************** function _ADCONV *****************
  1037 ;; Defined at:
  1038 ;;		line 169 in file "main.c"
  1039 ;; Parameters:    Size  Location     Type
  1040 ;;  CH              2    0[BANK0 ] int 
  1041 ;; Auto vars:     Size  Location     Type
  1042 ;;		None
  1043 ;; Return value:  Size  Location     Type
  1044 ;;                  1    wreg      void 
  1045 ;; Registers used:
  1046 ;;		wreg, status,2, status,0
  1047 ;; Tracked objects:
  1048 ;;		On entry : 0/0
  1049 ;;		On exit  : 0/0
  1050 ;;		Unchanged: 0/0
  1051 ;; Data sizes:     COMMON   BANK0   BANK1
  1052 ;;      Params:         0       2       0
  1053 ;;      Locals:         0       0       0
  1054 ;;      Temps:          0       0       0
  1055 ;;      Totals:         0       2       0
  1056 ;;Total ram usage:        2 bytes
  1057 ;; Hardware stack levels used:    1
  1058 ;; Hardware stack levels required when called:    1
  1059 ;; This function calls:
  1060 ;;		Nothing
  1061 ;; This function is called by:
  1062 ;;		_main
  1063 ;; This function uses a non-reentrant model
  1064 ;;
  1065                           
  1066                           
  1067                           ;psect for function _ADCONV
  1068  01BB                     _ADCONV:	
  1069                           
  1070                           ;main.c: 171: ADC_STEP = ADC_STEP + 1;
  1071                           
  1072                           ;incstack = 0
  1073                           ; Regs used in _ADCONV: [wreg+status,2+status,0]
  1074  01BB  0870               	movf	_ADC_STEP,w
  1075  01BC  3E01               	addlw	1
  1076  01BD  00F0               	movwf	_ADC_STEP
  1077  01BE  0871               	movf	_ADC_STEP+1,w
  1078  01BF  1803               	skipnc
  1079  01C0  3E01               	addlw	1
  1080  01C1  3E00               	addlw	0
  1081  01C2  00F1               	movwf	_ADC_STEP+1
  1082                           
  1083                           ;main.c: 173: if(CH == 0){
  1084  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  1085  01C4  0832               	movf	ADCONV@CH,w
  1086  01C5  0433               	iorwf	ADCONV@CH+1,w
  1087  01C6  1D03               	btfss	3,2
  1088  01C7  29CC               	goto	l1037
  1089                           
  1090                           ;main.c: 174: GL_CH = 0;
  1091  01C8  01A0               	clrf	_GL_CH
  1092  01C9  01A1               	clrf	_GL_CH+1
  1093                           
  1094                           ;main.c: 175: ADCON0bits.CHS1 = 0;
  1095  01CA  119F               	bcf	31,3	;volatile
  1096                           
  1097                           ;main.c: 176: ADCON0bits.CHS0 = 0;
  1098  01CB  111F               	bcf	31,2	;volatile
  1099  01CC                     l1037:	
  1100                           
  1101                           ;main.c: 177: }
  1102                           ;main.c: 179: if(CH == 1){
  1103  01CC  0332               	decf	ADCONV@CH,w
  1104  01CD  0433               	iorwf	ADCONV@CH+1,w
  1105  01CE  1D03               	btfss	3,2
  1106  01CF  29D6               	goto	l1045
  1107                           
  1108                           ;main.c: 180: GL_CH = 1;
  1109  01D0  3001               	movlw	1
  1110  01D1  00A0               	movwf	_GL_CH
  1111  01D2  3000               	movlw	0
  1112  01D3  00A1               	movwf	_GL_CH+1
  1113                           
  1114                           ;main.c: 181: ADCON0bits.CHS1 = 0;
  1115  01D4  119F               	bcf	31,3	;volatile
  1116                           
  1117                           ;main.c: 182: ADCON0bits.CHS0 = 1;
  1118  01D5  151F               	bsf	31,2	;volatile
  1119  01D6                     l1045:	
  1120                           
  1121                           ;main.c: 183: }
  1122                           ;main.c: 185: ADCON0bits.ADON = 1;
  1123  01D6  141F               	bsf	31,0	;volatile
  1124  01D7  0008               	return
  1125  01D8                     __end_of_ADCONV:	
  1126                           
  1127                           	psect	text5
  1128  01D8                     __ptext5:	
  1129 ;; *************** function _ISR *****************
  1130 ;; Defined at:
  1131 ;;		line 42 in file "main.c"
  1132 ;; Parameters:    Size  Location     Type
  1133 ;;		None
  1134 ;; Auto vars:     Size  Location     Type
  1135 ;;		None
  1136 ;; Return value:  Size  Location     Type
  1137 ;;                  1    wreg      void 
  1138 ;; Registers used:
  1139 ;;		wreg, status,2, status,0
  1140 ;; Tracked objects:
  1141 ;;		On entry : 0/0
  1142 ;;		On exit  : 0/0
  1143 ;;		Unchanged: 0/0
  1144 ;; Data sizes:     COMMON   BANK0   BANK1
  1145 ;;      Params:         0       0       0
  1146 ;;      Locals:         0       0       0
  1147 ;;      Temps:          4       0       0
  1148 ;;      Totals:         4       0       0
  1149 ;;Total ram usage:        4 bytes
  1150 ;; Hardware stack levels used:    1
  1151 ;; This function calls:
  1152 ;;		Nothing
  1153 ;; This function is called by:
  1154 ;;		Interrupt level 1
  1155 ;; This function uses a non-reentrant model
  1156 ;;
  1157                           
  1158                           
  1159                           ;psect for function _ISR
  1160  01D8                     _ISR:	
  1161                           
  1162                           ;main.c: 43: SEC = SEC + 1;
  1163  01D8  0828               	movf	_SEC,w
  1164  01D9  3E01               	addlw	1
  1165  01DA  00A8               	movwf	_SEC
  1166  01DB  0829               	movf	_SEC+1,w
  1167  01DC  1803               	skipnc
  1168  01DD  3E01               	addlw	1
  1169  01DE  3E00               	addlw	0
  1170  01DF  00A9               	movwf	_SEC+1
  1171                           
  1172                           ;main.c: 44: INTCONbits.GIE = 0;
  1173  01E0  138B               	bcf	11,7	;volatile
  1174                           
  1175                           ;main.c: 45: INTCONbits.T0IE = 0;
  1176  01E1  128B               	bcf	11,5	;volatile
  1177                           
  1178                           ;main.c: 46: INTCONbits.T0IF = 0;
  1179  01E2  110B               	bcf	11,2	;volatile
  1180                           
  1181                           ;main.c: 47: TMR0_NOW = 0;
  1182  01E3  01AC               	clrf	_TMR0_NOW
  1183  01E4  01AD               	clrf	_TMR0_NOW+1
  1184  01E5  0879               	movf	??_ISR+3,w
  1185  01E6  00FF               	movwf	127
  1186  01E7  0878               	movf	??_ISR+2,w
  1187  01E8  008A               	movwf	10
  1188  01E9  0877               	movf	??_ISR+1,w
  1189  01EA  0084               	movwf	4
  1190  01EB  0E76               	swapf	??_ISR^(0+-128),w
  1191  01EC  0083               	movwf	3
  1192  01ED  0EFE               	swapf	126,f
  1193  01EE  0E7E               	swapf	126,w
  1194  01EF  0009               	retfie
  1195  01F0                     __end_of_ISR:	
  1196  007E                     btemp	set	126	;btemp
  1197  007E                     wtemp0	set	126
  1198                           
  1199                           	psect	intentry
  1200  0004                     __pintentry:	
  1201                           ;incstack = 0
  1202                           ; Regs used in _ISR: [wreg+status,2+status,0]
  1203                           
  1204  0004                     interrupt_function:	
  1205  007E                     saved_w	set	btemp
  1206  0004  00FE               	movwf	btemp
  1207  0005  0E03               	swapf	3,w
  1208  0006  00F6               	movwf	??_ISR
  1209  0007  0804               	movf	4,w
  1210  0008  00F7               	movwf	??_ISR+1
  1211  0009  080A               	movf	10,w
  1212  000A  00F8               	movwf	??_ISR+2
  1213  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1214  000C  087F               	movf	btemp+1,w
  1215  000D  00F9               	movwf	??_ISR+3
  1216  000E  29D8               	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4      10
    BANK0            80      3      21
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_CHECKTEMP
    _CHECKTEMP->_SECSTART_64

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     644
                             _ADCONV
                          _CHECKTEMP
                     _FINALCHECKTEMP
                        _SECSTART_64
 ---------------------------------------------------------------------------------
 (1) _FINALCHECKTEMP                                       1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _CHECKTEMP                                            1     1      0     161
                                              2 BANK0      1     1      0
                        _SECSTART_64
 ---------------------------------------------------------------------------------
 (1) _SECSTART_64                                          2     0      2     161
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _ADCONV                                               2     0      2     322
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCONV
   _CHECKTEMP
     _SECSTART_64
   _FINALCHECKTEMP
   _SECSTART_64

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      4       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      3      15       4       26.3%
BANK1               20      0       0       5        0.0%
ABS                  0      0      1F       6        0.0%
BITBANK1            20      0       0       7        0.0%
DATA                 0      0      1F       8        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Dec 27 10:06:41 2017

     __size_of_CHECKTEMP 002F              __CFG_CP$OFF 0000                       l74 0140  
                     fsr 0004                      _SEC 0028             __CFG_CPD$OFF 0000  
                    _ISR 01D8                      fsr0 0004                      indf 0000  
           __CFG_IESO$ON 0000                     ?_ISR 0076                     l1121 0066  
                   l1051 0173                     l1107 0045                     l1045 01D6  
                   l1037 01CC                     l1133 0083                     l1063 01A5  
                   l1143 0096                     l1233 0154                     l1217 012F  
                   l1209 0120                     l1171 00D9                     l1237 015E  
                   l1159 00BB                     l1195 010B                     l1179 00E7  
                   u1015 016F                     u1025 017E                     u1035 019E  
                   u1045 01B0                     _TMR0 0001                     _STEP 0074  
          __CFG_FCMEN$ON 0000                     _main 001B                     btemp 007E  
          __CFG_BOREN$ON 0000                     start 000F            __CFG_MCLRE$ON 0000  
                  ??_ISR 0076                    ?_main 0076            __CFG_WDTE$OFF 0000  
                  _ANSEL 009F                    _GL_CH 0020             ?_SECSTART_64 0032  
      __end_of_CHECKTEMP 0193                    pclath 000A                    status 0003  
                  wtemp0 007E           _FINALCHECKTEMP 0193          __initialization 0010  
           __end_of_main 0164                   ??_main 007A                   _ADCON0 001F  
                 _ADCONV 01BB                   _ADRESH 001E                   _ADRESL 009E  
 __end_of_FINALCHECKTEMP 01BB                   _OSCCON 008F                   _TRISIO 0085  
         __CFG_PWRTE$OFF 0000                   saved_w 007E          ?_FINALCHECKTEMP 0076  
__end_of__initialization 0019           __pcstackCOMMON 0076                  ?_ADCONV 0032  
   __size_of_SECSTART_64 000F               __pbssBANK0 0020               __pmaintext 001B  
             __pintentry 0004          __size_of_ADCONV 001D                  _R_ERROR 0026  
                _Y_ERROR 0030                _CHECKTEMP 0164                  __ptext1 0193  
                __ptext2 0164                  __ptext3 01F0                  __ptext4 01BB  
                __ptext5 01D8             __size_of_ISR 0018                  clrloop0 0200  
   end_of_initialization 0019               ?_CHECKTEMP 0076         ??_FINALCHECKTEMP 0032  
         __end_of_ADCONV 01D8      SECSTART_64@TMR0_CNT 0032      start_initialization 0010  
            __end_of_ISR 01F0                 ??_ADCONV 007A                 ADCONV@CH 0032  
            ??_CHECKTEMP 0034            ??_SECSTART_64 007A              __pbssCOMMON 0070  
              ___latbits 0000            __pcstackBANK0 0032                 _ADC_STEP 0070  
    __end_of_SECSTART_64 01FF        interrupt_function 0004                 _GPIObits 0005  
              clear_ram0 01FF                 _PIE1bits 008C                 _REF_DATA 0024  
               _RED_STEP 0022                 _PIR1bits 000C                 _TMR0_NOW 002C  
               _R_DANGER 0072               _ADCON0bits 001F                 _Y_DANGER 002E  
            _SECSTART_64 01F0            __size_of_main 0149              _SENSOR_DATA 002A  
             _INTCONbits 000B                 intlevel1 0000  __size_of_FINALCHECKTEMP 0028  
             _OPTION_REG 0081       __CFG_FOSC$INTOSCIO 0000  
