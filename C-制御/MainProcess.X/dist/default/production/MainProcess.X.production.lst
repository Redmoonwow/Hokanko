

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Feb 02 19:25:20 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4553
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    12                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    20                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    21  0000                     
    22                           	psect	smallconst
    23  000800                     __psmallconst:
    24                           	opt stack 0
    25  000800  00                 	db	0
    26  000801                     _dpowers:
    27                           	opt stack 0
    28  000801  0001               	dw	1
    29  000803  000A               	dw	10
    30  000805  0064               	dw	100
    31  000807  03E8               	dw	1000
    32  000809  2710               	dw	10000
    33  00080B                     __end_of_dpowers:
    34                           	opt stack 0
    35  0000                     _TMR1	set	4046
    36  0000                     _INTCON	set	4082
    37  0000                     _INTCONbits	set	4082
    38  0000                     _PORTA	set	3968
    39  0000                     _RCONbits	set	4048
    40  0000                     _RCREG	set	4014
    41  0000                     _RCSTA	set	4011
    42  0000                     _SPBRG	set	4015
    43  0000                     _T0CON	set	4053
    44  0000                     _T1CON	set	4045
    45  0000                     _TMR0H	set	4055
    46  0000                     _TMR0L	set	4054
    47  0000                     _TMR1H	set	4047
    48  0000                     _TMR1L	set	4046
    49  0000                     _TRISA	set	3986
    50  0000                     _TRISB	set	3987
    51  0000                     _TRISC	set	3988
    52  0000                     _TRISCbits	set	3988
    53  0000                     _TXREG	set	4013
    54  0000                     _TXSTA	set	4012
    55  0000                     _RCIF	set	31989
    56  0000                     _TMR0IF	set	32658
    57  0000                     _TXIF	set	31988
    58  00080B                     STR_1:
    59  00080B  25                 	db	37
    60  00080C  64                 	db	100	;'d'
    61  00080D  00                 	db	0
    62                           
    63                           ; #config settings
    64  00080E  00                 	db	0	; dummy byte at the end
    65  0000                     
    66                           	psect	cinit
    67  000B98                     __pcinit:
    68                           	opt stack 0
    69  000B98                     start_initialization:
    70                           	opt stack 0
    71  000B98                     __initialization:
    72                           	opt stack 0
    73  000B98                     end_of_initialization:
    74                           	opt stack 0
    75  000B98                     __end_of__initialization:
    76                           	opt stack 0
    77  000B98  9039               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    78  000B9A  9239               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    79  000B9C  0E00               	movlw	low (__Lmediumconst shr (0+16))
    80  000B9E  6EF8               	movwf	tblptru,c
    81  000BA0  0100               	movlb	0
    82  000BA2  EF93  F005         	goto	_main	;jump to C main() function
    83                           tblptru	equ	0xFF8
    84                           
    85                           	psect	cstackBANK0
    86  000000                     __pcstackBANK0:
    87                           	opt stack 0
    88  000000                     tblptru	equ	0xFF8
    89                           
    90                           ; 0 bytes @ 0x0
    91                           
    92                           	psect	cstackCOMRAM
    93  000001                     __pcstackCOMRAM:
    94                           	opt stack 0
    95  000001                     ?___lwdiv:
    96                           	opt stack 0
    97  000001                     sentsimple@byte:
    98                           	opt stack 0
    99  000001                     sent@data:
   100                           	opt stack 0
   101  000001                     ___lwdiv@dividend:
   102                           	opt stack 0
   103                           
   104                           ; 2 bytes @ 0x0
   105  000001                     	ds	2
   106  000003                     sent@cnt:
   107                           	opt stack 0
   108  000003                     ___lwdiv@divisor:
   109                           	opt stack 0
   110                           
   111                           ; 2 bytes @ 0x2
   112  000003                     	ds	2
   113  000005                     ??_sent:
   114  000005                     ___lwdiv@quotient:
   115                           	opt stack 0
   116                           
   117                           ; 2 bytes @ 0x4
   118  000005                     	ds	1
   119  000006                     sent@i:
   120                           	opt stack 0
   121                           
   122                           ; 2 bytes @ 0x5
   123  000006                     	ds	1
   124  000007                     ___lwdiv@counter:
   125                           	opt stack 0
   126                           
   127                           ; 1 bytes @ 0x6
   128  000007                     	ds	1
   129  000008                     ?___lwmod:
   130                           	opt stack 0
   131  000008                     ___lwmod@dividend:
   132                           	opt stack 0
   133                           
   134                           ; 2 bytes @ 0x7
   135  000008                     	ds	2
   136  00000A                     ___lwmod@divisor:
   137                           	opt stack 0
   138                           
   139                           ; 2 bytes @ 0x9
   140  00000A                     	ds	2
   141  00000C                     ___lwmod@counter:
   142                           	opt stack 0
   143                           
   144                           ; 1 bytes @ 0xB
   145  00000C                     	ds	1
   146  00000D                     ?_sprintf:
   147                           	opt stack 0
   148  00000D                     sprintf@sp:
   149                           	opt stack 0
   150                           
   151                           ; 2 bytes @ 0xC
   152  00000D                     	ds	2
   153  00000F                     sprintf@f:
   154                           	opt stack 0
   155                           
   156                           ; 2 bytes @ 0xE
   157  00000F                     	ds	4
   158  000013                     ??_sprintf:
   159                           
   160                           ; 0 bytes @ 0x12
   161  000013                     	ds	1
   162  000014                     sprintf@ap:
   163                           	opt stack 0
   164                           
   165                           ; 2 bytes @ 0x13
   166  000014                     	ds	2
   167  000016                     sprintf@flag:
   168                           	opt stack 0
   169                           
   170                           ; 1 bytes @ 0x15
   171  000016                     	ds	1
   172  000017                     sprintf@prec:
   173                           	opt stack 0
   174                           
   175                           ; 1 bytes @ 0x16
   176  000017                     	ds	1
   177  000018                     sprintf@val:
   178                           	opt stack 0
   179                           
   180                           ; 2 bytes @ 0x17
   181  000018                     	ds	2
   182  00001A                     sprintf@c:
   183                           	opt stack 0
   184                           
   185                           ; 1 bytes @ 0x19
   186  00001A                     	ds	1
   187  00001B                     ??_INTR:
   188                           
   189                           ; 0 bytes @ 0x1A
   190  00001B                     	ds	14
   191  000029                     INTR@buffs:
   192                           	opt stack 0
   193                           
   194                           ; 10 bytes @ 0x28
   195  000029                     	ds	10
   196  000033                     INTR@data:
   197                           	opt stack 0
   198                           
   199                           ; 2 bytes @ 0x32
   200  000033                     	ds	2
   201  000035                     INTR@i:
   202                           	opt stack 0
   203                           
   204                           ; 2 bytes @ 0x34
   205  000035                     	ds	2
   206  000037                     INTR@cnt:
   207                           	opt stack 0
   208                           
   209                           ; 2 bytes @ 0x36
   210  000037                     	ds	2
   211                           tblptru	equ	0xFF8
   212                           
   213 ;;
   214 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   215 ;;
   216 ;; *************** function _main *****************
   217 ;; Defined at:
   218 ;;		line 125 in file "main.c"
   219 ;; Parameters:    Size  Location     Type
   220 ;;		None
   221 ;; Auto vars:     Size  Location     Type
   222 ;;		None
   223 ;; Return value:  Size  Location     Type
   224 ;;                  2   90[None  ] int 
   225 ;; Registers used:
   226 ;;		wreg, status,2, cstack
   227 ;; Tracked objects:
   228 ;;		On entry : 0/0
   229 ;;		On exit  : 0/0
   230 ;;		Unchanged: 0/0
   231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   232 ;;      Params:         0       0       0       0       0       0       0       0       0
   233 ;;      Locals:         0       0       0       0       0       0       0       0       0
   234 ;;      Temps:          0       0       0       0       0       0       0       0       0
   235 ;;      Totals:         0       0       0       0       0       0       0       0       0
   236 ;;Total ram usage:        0 bytes
   237 ;; Hardware stack levels required when called:    4
   238 ;; This function calls:
   239 ;;		_initUART
   240 ;; This function is called by:
   241 ;;		Startup code after reset
   242 ;; This function uses a non-reentrant model
   243 ;;
   244                           
   245                           	psect	text0
   246  000B26                     __ptext0:
   247                           	opt stack 0
   248  000B26                     _main:
   249                           	opt stack 27
   250                           
   251                           ;main.c: 127: TRISA = 0b11000;
   252                           
   253                           ;incstack = 0
   254  000B26  0E18               	movlw	24
   255  000B28  6E92               	movwf	3986,c	;volatile
   256                           
   257                           ;main.c: 128: TRISB = 0x00;
   258  000B2A  0E00               	movlw	0
   259  000B2C  6E93               	movwf	3987,c	;volatile
   260                           
   261                           ;main.c: 129: TRISC = 0x00;
   262  000B2E  0E00               	movlw	0
   263  000B30  6E94               	movwf	3988,c	;volatile
   264                           
   265                           ;main.c: 130: TRISCbits.RC0 = 1;
   266  000B32  8094               	bsf	3988,0,c	;volatile
   267                           
   268                           ;main.c: 131: TRISCbits.RC1 = 0;
   269  000B34  9294               	bcf	3988,1,c	;volatile
   270                           
   271                           ;main.c: 133: RCONbits.IPEN = 0;
   272  000B36  9ED0               	bcf	4048,7,c	;volatile
   273                           
   274                           ;main.c: 134: INTCON = 0b11000000;
   275  000B38  0EC0               	movlw	192
   276  000B3A  6EF2               	movwf	intcon,c	;volatile
   277                           
   278                           ;main.c: 135: T0CON = 0b10000111;
   279  000B3C  0E87               	movlw	135
   280  000B3E  6ED5               	movwf	4053,c	;volatile
   281                           
   282                           ;main.c: 136: T1CON = 0b11000111;
   283  000B40  0EC7               	movlw	199
   284  000B42  6ECD               	movwf	4045,c	;volatile
   285                           
   286                           ;main.c: 137: TMR0H = 0xb3;
   287  000B44  0EB3               	movlw	179
   288  000B46  6ED7               	movwf	4055,c	;volatile
   289                           
   290                           ;main.c: 138: TMR0L = 0xb5;
   291  000B48  0EB5               	movlw	181
   292  000B4A  6ED6               	movwf	4054,c	;volatile
   293                           
   294                           ;main.c: 139: TMR1 = 0x00;
   295  000B4C  0E00               	movlw	0
   296  000B4E  6ECF               	movwf	4047,c	;volatile
   297  000B50  0E00               	movlw	0
   298  000B52  6ECE               	movwf	4046,c	;volatile
   299                           
   300                           ;main.c: 140: INTCONbits.TMR0IE = 1;
   301  000B54  8AF2               	bsf	intcon,5,c	;volatile
   302                           
   303                           ;main.c: 142: PORTA = 0x00;
   304  000B56  0E00               	movlw	0
   305  000B58  6E80               	movwf	3968,c	;volatile
   306                           
   307                           ;main.c: 144: initUART();
   308  000B5A  ECD3  F005         	call	_initUART	;wreg free
   309  000B5E  D7FF               	goto	l92
   310  000B60                     __end_of_main:
   311                           	opt stack 0
   312                           tblptru	equ	0xFF8
   313                           intcon	equ	0xFF2
   314                           
   315 ;; *************** function _initUART *****************
   316 ;; Defined at:
   317 ;;		line 9 in file "USART.c"
   318 ;; Parameters:    Size  Location     Type
   319 ;;		None
   320 ;; Auto vars:     Size  Location     Type
   321 ;;		None
   322 ;; Return value:  Size  Location     Type
   323 ;;		None               void
   324 ;; Registers used:
   325 ;;		wreg, status,2
   326 ;; Tracked objects:
   327 ;;		On entry : 0/0
   328 ;;		On exit  : 0/0
   329 ;;		Unchanged: 0/0
   330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   331 ;;      Params:         0       0       0       0       0       0       0       0       0
   332 ;;      Locals:         0       0       0       0       0       0       0       0       0
   333 ;;      Temps:          0       0       0       0       0       0       0       0       0
   334 ;;      Totals:         0       0       0       0       0       0       0       0       0
   335 ;;Total ram usage:        0 bytes
   336 ;; Hardware stack levels used:    1
   337 ;; Hardware stack levels required when called:    3
   338 ;; This function calls:
   339 ;;		Nothing
   340 ;; This function is called by:
   341 ;;		_main
   342 ;; This function uses a non-reentrant model
   343 ;;
   344                           
   345                           	psect	text1
   346  000BA6                     __ptext1:
   347                           	opt stack 0
   348  000BA6                     _initUART:
   349                           	opt stack 27
   350                           
   351                           ;USART.c: 11: SPBRG = ((unsigned char)(((20000000 / 16) / 9600) -1));
   352                           
   353                           ;incstack = 0
   354  000BA6  0E81               	movlw	129
   355  000BA8  6EAF               	movwf	4015,c	;volatile
   356                           
   357                           ;USART.c: 12: TXSTA = (0x00 | 0x04 | 0x20);
   358  000BAA  0E24               	movlw	36
   359  000BAC  6EAC               	movwf	4012,c	;volatile
   360                           
   361                           ;USART.c: 13: RCSTA = (0x00 | 0x90);
   362  000BAE  0E90               	movlw	144
   363  000BB0  6EAB               	movwf	4011,c	;volatile
   364  000BB2  0012               	return		;funcret
   365  000BB4                     __end_of_initUART:
   366                           	opt stack 0
   367                           tblptru	equ	0xFF8
   368                           intcon	equ	0xFF2
   369                           
   370 ;; *************** function _INTR *****************
   371 ;; Defined at:
   372 ;;		line 78 in file "main.c"
   373 ;; Parameters:    Size  Location     Type
   374 ;;		None
   375 ;; Auto vars:     Size  Location     Type
   376 ;;  buffs          10   40[COMRAM] unsigned char [10]
   377 ;;  cnt             2   54[COMRAM] volatile int 
   378 ;;  data            2   50[COMRAM] int 
   379 ;;  i               2   52[COMRAM] volatile int 
   380 ;; Return value:  Size  Location     Type
   381 ;;                  2   82[None  ] int 
   382 ;; Registers used:
   383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   384 ;; Tracked objects:
   385 ;;		On entry : 0/0
   386 ;;		On exit  : 0/0
   387 ;;		Unchanged: 0/0
   388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   389 ;;      Params:         0       0       0       0       0       0       0       0       0
   390 ;;      Locals:        16       0       0       0       0       0       0       0       0
   391 ;;      Temps:         14       0       0       0       0       0       0       0       0
   392 ;;      Totals:        30       0       0       0       0       0       0       0       0
   393 ;;Total ram usage:       30 bytes
   394 ;; Hardware stack levels used:    1
   395 ;; Hardware stack levels required when called:    2
   396 ;; This function calls:
   397 ;;		_sent
   398 ;;		_sentsimple
   399 ;;		_sprintf
   400 ;; This function is called by:
   401 ;;		Interrupt level 2
   402 ;; This function uses a non-reentrant model
   403 ;;
   404                           
   405                           	psect	intcode
   406  000008                     __pintcode:
   407                           	opt stack 0
   408  000008                     _INTR:
   409                           	opt stack 27
   410                           
   411                           ;incstack = 0
   412  000008  8239               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
   413  00000A  CFFA F01B          	movff	pclath,??_INTR
   414  00000E  CFFB F01C          	movff	pclatu,??_INTR+1
   415  000012  EDAC  F004         	call	int_func,f	;refresh shadow registers
   416                           pclatu	equ	0xFFB
   417                           pclath	equ	0xFFA
   418                           tblptru	equ	0xFF8
   419                           intcon	equ	0xFF2
   420                           
   421                           	psect	intcode_body
   422  000958                     __pintcode_body:
   423                           	opt stack 27
   424  000958                     int_func:
   425                           	opt stack 27
   426  000958  0006               	pop		; remove dummy address from shadow register refresh
   427  00095A  CFE9 F01D          	movff	fsr0l,??_INTR+2
   428  00095E  CFEA F01E          	movff	fsr0h,??_INTR+3
   429  000962  CFE1 F01F          	movff	fsr1l,??_INTR+4
   430  000966  CFE2 F020          	movff	fsr1h,??_INTR+5
   431  00096A  CFD9 F021          	movff	fsr2l,??_INTR+6
   432  00096E  CFDA F022          	movff	fsr2h,??_INTR+7
   433  000972  CFF3 F023          	movff	prodl,??_INTR+8
   434  000976  CFF4 F024          	movff	prodh,??_INTR+9
   435  00097A  CFF6 F025          	movff	tblptrl,??_INTR+10
   436  00097E  CFF7 F026          	movff	tblptrh,??_INTR+11
   437  000982  CFF8 F027          	movff	tblptru,??_INTR+12
   438  000986  CFF5 F028          	movff	tablat,??_INTR+13
   439                           
   440                           ;main.c: 79: INTCONbits.GIE = 0;
   441  00098A  9EF2               	bcf	intcon,7,c	;volatile
   442                           
   443                           ;main.c: 81: if(TMR0IF ==1){
   444  00098C  A4F2               	btfss	intcon,2,c	;volatile
   445  00098E  D063               	goto	i2l88
   446                           
   447                           ;main.c: 82: volatile int i = 0,cnt = 0;
   448  000990  0E00               	movlw	0
   449  000992  6E36               	movwf	INTR@i+1,c	;volatile
   450  000994  0E00               	movlw	0
   451  000996  6E35               	movwf	INTR@i,c	;volatile
   452  000998  0E00               	movlw	0
   453  00099A  6E38               	movwf	INTR@cnt+1,c	;volatile
   454  00099C  0E00               	movlw	0
   455  00099E  6E37               	movwf	INTR@cnt,c	;volatile
   456                           
   457                           ;main.c: 83: int data = TMR1;
   458  0009A0  CFCE F033          	movff	4046,INTR@data	;volatile
   459  0009A4  CFCF F034          	movff	4047,INTR@data+1	;volatile
   460                           
   461                           ;main.c: 84: char buffs[10];
   462                           ;main.c: 85: sprintf(buffs , "%d" , data);
   463  0009A8  0E29               	movlw	low INTR@buffs
   464  0009AA  6E0D               	movwf	sprintf@sp,c
   465  0009AC  0E00               	movlw	high INTR@buffs
   466  0009AE  6E0E               	movwf	sprintf@sp+1,c
   467  0009B0  0E0B               	movlw	low STR_1
   468  0009B2  6E0F               	movwf	sprintf@f,c
   469  0009B4  0E08               	movlw	high STR_1
   470  0009B6  6E10               	movwf	sprintf@f+1,c
   471  0009B8  C033  F011         	movff	INTR@data,?_sprintf+4
   472  0009BC  C034  F012         	movff	INTR@data+1,?_sprintf+5
   473  0009C0  EC08  F004         	call	_sprintf	;wreg free
   474  0009C4                     i2l1036:
   475                           
   476                           ;main.c: 89: if(buffs[i] == (0)){
   477  0009C4  0E29               	movlw	low INTR@buffs
   478  0009C6  2435               	addwf	INTR@i,w,c	;volatile
   479  0009C8  6ED9               	movwf	fsr2l,c
   480  0009CA  0E00               	movlw	high INTR@buffs
   481  0009CC  2036               	addwfc	INTR@i+1,w,c	;volatile
   482  0009CE  6EDA               	movwf	fsr2h,c
   483  0009D0  50DF               	movf	indf2,w,c
   484  0009D2  A4D8               	btfss	status,2,c
   485  0009D4  D007               	goto	i2l1042
   486                           
   487                           ;main.c: 90: cnt = cnt+1;
   488  0009D6  0E01               	movlw	1
   489  0009D8  2437               	addwf	INTR@cnt,w,c	;volatile
   490  0009DA  6E37               	movwf	INTR@cnt,c	;volatile
   491  0009DC  0E00               	movlw	0
   492  0009DE  2038               	addwfc	INTR@cnt+1,w,c	;volatile
   493  0009E0  6E38               	movwf	INTR@cnt+1,c	;volatile
   494                           
   495                           ;main.c: 91: break;
   496  0009E2  D005               	goto	i2l1044
   497  0009E4                     i2l1042:
   498                           
   499                           ;main.c: 94: else{ i++;
   500  0009E4  4A35               	infsnz	INTR@i,f,c	;volatile
   501  0009E6  2A36               	incf	INTR@i+1,f,c	;volatile
   502                           
   503                           ;main.c: 95: cnt++;
   504  0009E8  4A37               	infsnz	INTR@cnt,f,c	;volatile
   505  0009EA  2A38               	incf	INTR@cnt+1,f,c	;volatile
   506                           
   507                           ;main.c: 96: }
   508                           ;main.c: 97: }
   509  0009EC  D7EB               	goto	i2l1036
   510  0009EE                     i2l1044:
   511                           
   512                           ;main.c: 99: PORTA = 0x01;
   513  0009EE  0E01               	movlw	1
   514  0009F0  6E80               	movwf	3968,c	;volatile
   515                           
   516                           ;main.c: 101: sent(buffs,cnt-1);
   517  0009F2  0E29               	movlw	low INTR@buffs
   518  0009F4  6E01               	movwf	sent@data,c
   519  0009F6  0E00               	movlw	high INTR@buffs
   520  0009F8  6E02               	movwf	sent@data+1,c
   521  0009FA  0EFF               	movlw	255
   522  0009FC  2437               	addwf	INTR@cnt,w,c	;volatile
   523  0009FE  6E03               	movwf	sent@cnt,c
   524  000A00  0EFF               	movlw	255
   525  000A02  2038               	addwfc	INTR@cnt+1,w,c	;volatile
   526  000A04  6E04               	movwf	sent@cnt+1,c
   527  000A06  ECB0  F005         	call	_sent	;wreg free
   528                           
   529                           ;main.c: 102: _delay((unsigned long)((20)*(20000000/4000000.0)));
   530  000A0A  0E21               	movlw	33
   531  000A0C                     i2u39_47:
   532  000A0C  2EE8               	decfsz	wreg,f,c
   533  000A0E  D7FE               	goto	i2u39_47
   534  000A10  F000               	nop	
   535                           
   536                           ;main.c: 103: sentsimple(13);
   537  000A12  0E0D               	movlw	13
   538  000A14  ECDA  F005         	call	_sentsimple
   539                           
   540                           ;main.c: 104: _delay((unsigned long)((20)*(20000000/4000000.0)));
   541  000A18  0E21               	movlw	33
   542  000A1A                     i2u40_47:
   543  000A1A  2EE8               	decfsz	wreg,f,c
   544  000A1C  D7FE               	goto	i2u40_47
   545  000A1E  F000               	nop	
   546                           
   547                           ;main.c: 105: sentsimple(10);
   548  000A20  0E0A               	movlw	10
   549  000A22  ECDA  F005         	call	_sentsimple
   550                           
   551                           ;main.c: 107: PORTA = 0x00;
   552  000A26  0E00               	movlw	0
   553  000A28  6E80               	movwf	3968,c	;volatile
   554                           
   555                           ;main.c: 109: _delay((unsigned long)((20)*(20000000/4000000.0)));
   556  000A2A  0E21               	movlw	33
   557  000A2C                     i2u41_47:
   558  000A2C  2EE8               	decfsz	wreg,f,c
   559  000A2E  D7FE               	goto	i2u41_47
   560  000A30  F000               	nop	
   561                           
   562                           ;main.c: 110: _delay((unsigned long)((20)*(20000000/4000000.0)));
   563  000A32  0E21               	movlw	33
   564  000A34                     i2u42_47:
   565  000A34  2EE8               	decfsz	wreg,f,c
   566  000A36  D7FE               	goto	i2u42_47
   567  000A38  F000               	nop	
   568                           
   569                           ;main.c: 111: data = 0;
   570  000A3A  0E00               	movlw	0
   571  000A3C  6E34               	movwf	INTR@data+1,c
   572  000A3E  0E00               	movlw	0
   573  000A40  6E33               	movwf	INTR@data,c
   574                           
   575                           ;main.c: 113: TMR0H = 0xb3;
   576  000A42  0EB3               	movlw	179
   577  000A44  6ED7               	movwf	4055,c	;volatile
   578                           
   579                           ;main.c: 114: TMR0L = 0xb5;
   580  000A46  0EB5               	movlw	181
   581  000A48  6ED6               	movwf	4054,c	;volatile
   582                           
   583                           ;main.c: 115: TMR1H = 0x00;
   584  000A4A  0E00               	movlw	0
   585  000A4C  6ECF               	movwf	4047,c	;volatile
   586                           
   587                           ;main.c: 116: TMR1L = 0x00;
   588  000A4E  0E00               	movlw	0
   589  000A50  6ECE               	movwf	4046,c	;volatile
   590                           
   591                           ;main.c: 117: INTCONbits.TMR0IF = 0;
   592  000A52  94F2               	bcf	intcon,2,c	;volatile
   593                           
   594                           ;main.c: 118: INTCONbits.GIE = 1;
   595  000A54  8EF2               	bsf	intcon,7,c	;volatile
   596  000A56                     i2l88:
   597  000A56  C028  FFF5         	movff	??_INTR+13,tablat
   598  000A5A  C027  FFF8         	movff	??_INTR+12,tblptru
   599  000A5E  C026  FFF7         	movff	??_INTR+11,tblptrh
   600  000A62  C025  FFF6         	movff	??_INTR+10,tblptrl
   601  000A66  C024  FFF4         	movff	??_INTR+9,prodh
   602  000A6A  C023  FFF3         	movff	??_INTR+8,prodl
   603  000A6E  C022  FFDA         	movff	??_INTR+7,fsr2h
   604  000A72  C021  FFD9         	movff	??_INTR+6,fsr2l
   605  000A76  C020  FFE2         	movff	??_INTR+5,fsr1h
   606  000A7A  C01F  FFE1         	movff	??_INTR+4,fsr1l
   607  000A7E  C01E  FFEA         	movff	??_INTR+3,fsr0h
   608  000A82  C01D  FFE9         	movff	??_INTR+2,fsr0l
   609  000A86  C01C  FFFB         	movff	??_INTR+1,pclatu
   610  000A8A  C01B  FFFA         	movff	??_INTR,pclath
   611  000A8E  9239               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
   612  000A90  0011               	retfie		f
   613  000A92                     __end_of_INTR:
   614                           	opt stack 0
   615                           pclatu	equ	0xFFB
   616                           pclath	equ	0xFFA
   617                           tblptru	equ	0xFF8
   618                           tblptrh	equ	0xFF7
   619                           tblptrl	equ	0xFF6
   620                           tablat	equ	0xFF5
   621                           prodh	equ	0xFF4
   622                           prodl	equ	0xFF3
   623                           intcon	equ	0xFF2
   624                           fsr0h	equ	0xFEA
   625                           fsr0l	equ	0xFE9
   626                           wreg	equ	0xFE8
   627                           fsr1h	equ	0xFE2
   628                           fsr1l	equ	0xFE1
   629                           indf2	equ	0xFDF
   630                           fsr2h	equ	0xFDA
   631                           fsr2l	equ	0xFD9
   632                           status	equ	0xFD8
   633                           
   634 ;; *************** function _sprintf *****************
   635 ;; Defined at:
   636 ;;		line 492 in file "D:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
   637 ;; Parameters:    Size  Location     Type
   638 ;;  sp              2   12[COMRAM] PTR unsigned char 
   639 ;;		 -> INTR@buffs(10), 
   640 ;;  f               2   14[COMRAM] PTR const unsigned char 
   641 ;;		 -> STR_1(3), 
   642 ;; Auto vars:     Size  Location     Type
   643 ;;  tmpval          4    0        struct .
   644 ;;  cp              3    0        PTR const unsigned char 
   645 ;;  val             2   23[COMRAM] unsigned int 
   646 ;;  ap              2   19[COMRAM] PTR void [1]
   647 ;;		 -> ?_sprintf(2), 
   648 ;;  len             2    0        unsigned int 
   649 ;;  c               1   25[COMRAM] char 
   650 ;;  prec            1   22[COMRAM] char 
   651 ;;  flag            1   21[COMRAM] unsigned char 
   652 ;; Return value:  Size  Location     Type
   653 ;;                  2   12[COMRAM] int 
   654 ;; Registers used:
   655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   656 ;; Tracked objects:
   657 ;;		On entry : 0/0
   658 ;;		On exit  : 0/0
   659 ;;		Unchanged: 0/0
   660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   661 ;;      Params:         6       0       0       0       0       0       0       0       0
   662 ;;      Locals:         7       0       0       0       0       0       0       0       0
   663 ;;      Temps:          1       0       0       0       0       0       0       0       0
   664 ;;      Totals:        14       0       0       0       0       0       0       0       0
   665 ;;Total ram usage:       14 bytes
   666 ;; Hardware stack levels used:    1
   667 ;; Hardware stack levels required when called:    1
   668 ;; This function calls:
   669 ;;		___lwdiv
   670 ;;		___lwmod
   671 ;; This function is called by:
   672 ;;		_INTR
   673 ;; This function uses a non-reentrant model
   674 ;;
   675                           
   676                           	psect	text3
   677  000810                     __ptext3:
   678                           	opt stack 0
   679  000810                     _sprintf:
   680                           	opt stack 27
   681                           
   682                           ;doprnt.c: 494: va_list ap;
   683                           ;doprnt.c: 499: signed char c;
   684                           ;doprnt.c: 506: signed char prec;
   685                           ;doprnt.c: 508: unsigned char flag;
   686                           ;doprnt.c: 523: union {
   687                           ;doprnt.c: 524: unsigned long vd;
   688                           ;doprnt.c: 525: double integ;
   689                           ;doprnt.c: 526: } tmpval;
   690                           ;doprnt.c: 528: unsigned int val;
   691                           ;doprnt.c: 529: unsigned len;
   692                           ;doprnt.c: 530: const char * cp;
   693                           ;doprnt.c: 533: *ap = __va_start();
   694                           
   695                           ;incstack = 0
   696  000810  0E11               	movlw	low (?_sprintf+4)
   697  000812  6E14               	movwf	sprintf@ap,c
   698  000814  0E00               	movlw	high (?_sprintf+4)
   699  000816  6E15               	movwf	sprintf@ap+1,c
   700                           
   701                           ;doprnt.c: 536: while(c = *f++) {
   702  000818  D08C               	goto	i2l1022
   703  00081A                     i2l970:
   704                           
   705                           ;doprnt.c: 538: if(c != '%')
   706  00081A  0E25               	movlw	37
   707  00081C  181A               	xorwf	sprintf@c,w,c
   708  00081E  B4D8               	btfsc	status,2,c
   709  000820  D009               	goto	i2l976
   710                           
   711                           ;doprnt.c: 540: {
   712                           ;doprnt.c: 541: ((*sp++ = (c)));
   713  000822  C00D  FFD9         	movff	sprintf@sp,fsr2l
   714  000826  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   715  00082A  C01A  FFDF         	movff	sprintf@c,indf2
   716  00082E  4A0D               	infsnz	sprintf@sp,f,c
   717  000830  2A0E               	incf	sprintf@sp+1,f,c
   718                           
   719                           ;doprnt.c: 542: continue;
   720  000832  D07F               	goto	i2l1022
   721  000834                     i2l976:
   722                           
   723                           ;doprnt.c: 543: }
   724                           ;doprnt.c: 548: flag = 0;
   725  000834  0E00               	movlw	0
   726  000836  6E16               	movwf	sprintf@flag,c
   727                           
   728                           ;doprnt.c: 822: }
   729                           
   730                           ;doprnt.c: 813: continue;
   731                           
   732                           ;doprnt.c: 802: default:
   733                           
   734                           ;doprnt.c: 698: case 'i':
   735                           ;doprnt.c: 699: break;
   736                           
   737                           ;doprnt.c: 697: case 'd':
   738                           
   739                           ;doprnt.c: 638: goto alldone;
   740                           
   741                           ;doprnt.c: 637: case 0:
   742                           
   743                           ;doprnt.c: 635: switch(c = *f++) {
   744  000838  C00F  FFF6         	movff	sprintf@f,tblptrl
   745  00083C  C010  FFF7         	movff	sprintf@f+1,tblptrh
   746  000840  4A0F               	infsnz	sprintf@f,f,c
   747  000842  2A10               	incf	sprintf@f+1,f,c
   748  000844                     	if	0	;tblptru may be non-zero
   749  000844                     	endif
   750  000844                     	if	0	;tblptru may be non-zero
   751  000844                     	endif
   752  000844  0008               	tblrd		*
   753  000846  CFF5 F01A          	movff	tablat,sprintf@c
   754  00084A  501A               	movf	sprintf@c,w,c
   755                           
   756                           ; Switch size 1, requested type "space"
   757                           ; Number of cases is 3, Range of values is 0 to 105
   758                           ; switch strategies available:
   759                           ; Name         Instructions Cycles
   760                           ; simple_byte           10     6 (average)
   761                           ;	Chosen strategy is simple_byte
   762  00084C  0A00               	xorlw	0	; case 0
   763  00084E  B4D8               	btfsc	status,2,c
   764  000850  D07C               	goto	i2l1024
   765  000852  0A64               	xorlw	100	; case 100
   766  000854  B4D8               	btfsc	status,2,c
   767  000856  D003               	goto	i2l982
   768  000858  0A0D               	xorlw	13	; case 105
   769  00085A  A4D8               	btfss	status,2,c
   770  00085C  D06A               	goto	i2l1022
   771  00085E                     i2l982:
   772                           
   773                           ;doprnt.c: 1253: {
   774                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   775  00085E  C014  FFD9         	movff	sprintf@ap,fsr2l
   776  000862  C015  FFDA         	movff	sprintf@ap+1,fsr2h
   777  000866  CFDE F018          	movff	postinc2,sprintf@val
   778  00086A  CFDD F019          	movff	postdec2,sprintf@val+1
   779  00086E  0E02               	movlw	2
   780  000870  2614               	addwf	sprintf@ap,f,c
   781  000872  0E00               	movlw	0
   782  000874  2215               	addwfc	sprintf@ap+1,f,c
   783                           
   784                           ;doprnt.c: 1261: if((int)val < 0) {
   785  000876  AE19               	btfss	sprintf@val+1,7,c
   786  000878  D006               	goto	i2l992
   787                           
   788                           ;doprnt.c: 1262: flag |= 0x03;
   789  00087A  0E03               	movlw	3
   790  00087C  1216               	iorwf	sprintf@flag,f,c
   791                           
   792                           ;doprnt.c: 1263: val = -val;
   793  00087E  6C18               	negf	sprintf@val,c
   794  000880  1E19               	comf	sprintf@val+1,f,c
   795  000882  B0D8               	btfsc	status,0,c
   796  000884  2A19               	incf	sprintf@val+1,f,c
   797  000886                     i2l992:
   798                           
   799                           ;doprnt.c: 1264: }
   800                           ;doprnt.c: 1266: }
   801                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   802  000886  0E01               	movlw	1
   803  000888  6E1A               	movwf	sprintf@c,c
   804  00088A                     i2l994:
   805  00088A  0E05               	movlw	5
   806  00088C  181A               	xorwf	sprintf@c,w,c
   807  00088E  B4D8               	btfsc	status,2,c
   808  000890  D012               	goto	i2l1006
   809                           
   810                           ;doprnt.c: 1306: if(val < dpowers[c])
   811  000892  501A               	movf	sprintf@c,w,c
   812  000894  0D02               	mullw	2
   813  000896  0E01               	movlw	low _dpowers
   814  000898  24F3               	addwf	prodl,w,c
   815  00089A  6EF6               	movwf	tblptrl,c
   816  00089C  0E08               	movlw	high _dpowers
   817  00089E  20F4               	addwfc	prodh,w,c
   818  0008A0  6EF7               	movwf	tblptrh,c
   819  0008A2                     	if	0	;There are less than 3 active tblptr bytes
   820  0008A2                     	endif
   821  0008A2  0009               	tblrd		*+
   822  0008A4  50F5               	movf	tablat,w,c
   823  0008A6  5C18               	subwf	sprintf@val,w,c
   824  0008A8  0009               	tblrd		*+
   825  0008AA  50F5               	movf	tablat,w,c
   826  0008AC  5819               	subwfb	sprintf@val+1,w,c
   827  0008AE  A0D8               	btfss	status,0,c
   828  0008B0  D002               	goto	i2l1006
   829                           
   830                           ;doprnt.c: 1307: break;
   831  0008B2  2A1A               	incf	sprintf@c,f,c
   832  0008B4  D7EA               	goto	i2l994
   833  0008B6                     i2l1006:
   834                           
   835                           ;doprnt.c: 1422: {
   836                           ;doprnt.c: 1438: if(flag & 0x03)
   837  0008B6  C016  F013         	movff	sprintf@flag,??_sprintf
   838  0008BA  0E03               	movlw	3
   839  0008BC  1613               	andwf	??_sprintf,f,c
   840  0008BE  B4D8               	btfsc	status,2,c
   841  0008C0  D008               	goto	i2l1012
   842                           
   843                           ;doprnt.c: 1439: ((*sp++ = ('-')));
   844  0008C2  C00D  FFD9         	movff	sprintf@sp,fsr2l
   845  0008C6  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   846  0008CA  0E2D               	movlw	45
   847  0008CC  6EDF               	movwf	indf2,c
   848  0008CE  4A0D               	infsnz	sprintf@sp,f,c
   849  0008D0  2A0E               	incf	sprintf@sp+1,f,c
   850  0008D2                     i2l1012:
   851                           
   852                           ;doprnt.c: 1469: }
   853                           ;doprnt.c: 1472: prec = c;
   854  0008D2  C01A  F017         	movff	sprintf@c,sprintf@prec
   855                           
   856                           ;doprnt.c: 1474: while(prec--) {
   857  0008D6  D029               	goto	i2l1020
   858  0008D8                     i2l1014:
   859                           
   860                           ;doprnt.c: 1478: {
   861                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   862  0008D8  5017               	movf	sprintf@prec,w,c
   863  0008DA  0D02               	mullw	2
   864  0008DC  0E01               	movlw	low _dpowers
   865  0008DE  24F3               	addwf	prodl,w,c
   866  0008E0  6EF6               	movwf	tblptrl,c
   867  0008E2  0E08               	movlw	high _dpowers
   868  0008E4  20F4               	addwfc	prodh,w,c
   869  0008E6  6EF7               	movwf	tblptrh,c
   870  0008E8                     	if	0	;There are less than 3 active tblptr bytes
   871  0008E8                     	endif
   872  0008E8  0009               	tblrd		*+
   873  0008EA  CFF5 F003          	movff	tablat,___lwdiv@divisor
   874  0008EE  000A               	tblrd		*-
   875  0008F0  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
   876  0008F4  C018  F001         	movff	sprintf@val,___lwdiv@dividend
   877  0008F8  C019  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
   878  0008FC  EC49  F005         	call	___lwdiv	;wreg free
   879  000900  C001  F008         	movff	?___lwdiv,___lwmod@dividend
   880  000904  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
   881  000908  0E00               	movlw	0
   882  00090A  6E0B               	movwf	___lwmod@divisor+1,c
   883  00090C  0E0A               	movlw	10
   884  00090E  6E0A               	movwf	___lwmod@divisor,c
   885  000910  EC72  F005         	call	___lwmod	;wreg free
   886  000914  5008               	movf	?___lwmod,w,c
   887  000916  0F30               	addlw	48
   888  000918  6E1A               	movwf	sprintf@c,c
   889                           
   890                           ;doprnt.c: 1523: }
   891                           ;doprnt.c: 1524: ((*sp++ = (c)));
   892  00091A  C00D  FFD9         	movff	sprintf@sp,fsr2l
   893  00091E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   894  000922  C01A  FFDF         	movff	sprintf@c,indf2
   895  000926  4A0D               	infsnz	sprintf@sp,f,c
   896  000928  2A0E               	incf	sprintf@sp+1,f,c
   897  00092A                     i2l1020:
   898  00092A  0617               	decf	sprintf@prec,f,c
   899  00092C  2817               	incf	sprintf@prec,w,c
   900  00092E  A4D8               	btfss	status,2,c
   901  000930  D7D3               	goto	i2l1014
   902  000932                     i2l1022:
   903  000932  C00F  FFF6         	movff	sprintf@f,tblptrl
   904  000936  C010  FFF7         	movff	sprintf@f+1,tblptrh
   905  00093A  4A0F               	infsnz	sprintf@f,f,c
   906  00093C  2A10               	incf	sprintf@f+1,f,c
   907  00093E                     	if	0	;tblptru may be non-zero
   908  00093E                     	endif
   909  00093E                     	if	0	;tblptru may be non-zero
   910  00093E                     	endif
   911  00093E  0008               	tblrd		*
   912  000940  CFF5 F01A          	movff	tablat,sprintf@c
   913  000944  501A               	movf	sprintf@c,w,c
   914  000946  A4D8               	btfss	status,2,c
   915  000948  D768               	goto	i2l970
   916  00094A                     i2l1024:
   917                           
   918                           ;doprnt.c: 1538: *sp = 0;
   919  00094A  C00D  FFD9         	movff	sprintf@sp,fsr2l
   920  00094E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   921  000952  0E00               	movlw	0
   922  000954  6EDF               	movwf	indf2,c
   923  000956  0012               	return	
   924  000958                     __end_of_sprintf:
   925                           	opt stack 0
   926                           pclatu	equ	0xFFB
   927                           pclath	equ	0xFFA
   928                           tblptru	equ	0xFF8
   929                           tblptrh	equ	0xFF7
   930                           tblptrl	equ	0xFF6
   931                           tablat	equ	0xFF5
   932                           prodh	equ	0xFF4
   933                           prodl	equ	0xFF3
   934                           intcon	equ	0xFF2
   935                           fsr0h	equ	0xFEA
   936                           fsr0l	equ	0xFE9
   937                           wreg	equ	0xFE8
   938                           fsr1h	equ	0xFE2
   939                           fsr1l	equ	0xFE1
   940                           indf2	equ	0xFDF
   941                           postinc2	equ	0xFDE
   942                           postdec2	equ	0xFDD
   943                           fsr2h	equ	0xFDA
   944                           fsr2l	equ	0xFD9
   945                           status	equ	0xFD8
   946                           
   947 ;; *************** function ___lwmod *****************
   948 ;; Defined at:
   949 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
   950 ;; Parameters:    Size  Location     Type
   951 ;;  dividend        2    7[COMRAM] unsigned int 
   952 ;;  divisor         2    9[COMRAM] unsigned int 
   953 ;; Auto vars:     Size  Location     Type
   954 ;;  counter         1   11[COMRAM] unsigned char 
   955 ;; Return value:  Size  Location     Type
   956 ;;                  2    7[COMRAM] unsigned int 
   957 ;; Registers used:
   958 ;;		wreg, status,2, status,0
   959 ;; Tracked objects:
   960 ;;		On entry : 0/0
   961 ;;		On exit  : 0/0
   962 ;;		Unchanged: 0/0
   963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   964 ;;      Params:         4       0       0       0       0       0       0       0       0
   965 ;;      Locals:         1       0       0       0       0       0       0       0       0
   966 ;;      Temps:          0       0       0       0       0       0       0       0       0
   967 ;;      Totals:         5       0       0       0       0       0       0       0       0
   968 ;;Total ram usage:        5 bytes
   969 ;; Hardware stack levels used:    1
   970 ;; This function calls:
   971 ;;		Nothing
   972 ;; This function is called by:
   973 ;;		_sprintf
   974 ;; This function uses a non-reentrant model
   975 ;;
   976                           
   977                           	psect	text4
   978  000AE4                     __ptext4:
   979                           	opt stack 0
   980  000AE4                     ___lwmod:
   981                           	opt stack 27
   982                           
   983                           ;incstack = 0
   984  000AE4  500A               	movf	___lwmod@divisor,w,c
   985  000AE6  100B               	iorwf	___lwmod@divisor+1,w,c
   986  000AE8  B4D8               	btfsc	status,2,c
   987  000AEA  D018               	goto	i2l535
   988  000AEC  0E01               	movlw	1
   989  000AEE  6E0C               	movwf	___lwmod@counter,c
   990  000AF0  D004               	goto	i2l946
   991  000AF2                     i2l944:
   992  000AF2  90D8               	bcf	status,0,c
   993  000AF4  360A               	rlcf	___lwmod@divisor,f,c
   994  000AF6  360B               	rlcf	___lwmod@divisor+1,f,c
   995  000AF8  2A0C               	incf	___lwmod@counter,f,c
   996  000AFA                     i2l946:
   997  000AFA  AE0B               	btfss	___lwmod@divisor+1,7,c
   998  000AFC  D7FA               	goto	i2l944
   999  000AFE                     i2l948:
  1000  000AFE  500A               	movf	___lwmod@divisor,w,c
  1001  000B00  5C08               	subwf	___lwmod@dividend,w,c
  1002  000B02  500B               	movf	___lwmod@divisor+1,w,c
  1003  000B04  5809               	subwfb	___lwmod@dividend+1,w,c
  1004  000B06  A0D8               	btfss	status,0,c
  1005  000B08  D004               	goto	i2l952
  1006  000B0A  500A               	movf	___lwmod@divisor,w,c
  1007  000B0C  5E08               	subwf	___lwmod@dividend,f,c
  1008  000B0E  500B               	movf	___lwmod@divisor+1,w,c
  1009  000B10  5A09               	subwfb	___lwmod@dividend+1,f,c
  1010  000B12                     i2l952:
  1011  000B12  90D8               	bcf	status,0,c
  1012  000B14  320B               	rrcf	___lwmod@divisor+1,f,c
  1013  000B16  320A               	rrcf	___lwmod@divisor,f,c
  1014  000B18  2E0C               	decfsz	___lwmod@counter,f,c
  1015  000B1A  D7F1               	goto	i2l948
  1016  000B1C                     i2l535:
  1017  000B1C  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1018  000B20  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1019  000B24  0012               	return		;funcret
  1020  000B26                     __end_of___lwmod:
  1021                           	opt stack 0
  1022                           pclatu	equ	0xFFB
  1023                           pclath	equ	0xFFA
  1024                           tblptru	equ	0xFF8
  1025                           tblptrh	equ	0xFF7
  1026                           tblptrl	equ	0xFF6
  1027                           tablat	equ	0xFF5
  1028                           prodh	equ	0xFF4
  1029                           prodl	equ	0xFF3
  1030                           intcon	equ	0xFF2
  1031                           fsr0h	equ	0xFEA
  1032                           fsr0l	equ	0xFE9
  1033                           wreg	equ	0xFE8
  1034                           fsr1h	equ	0xFE2
  1035                           fsr1l	equ	0xFE1
  1036                           indf2	equ	0xFDF
  1037                           postinc2	equ	0xFDE
  1038                           postdec2	equ	0xFDD
  1039                           fsr2h	equ	0xFDA
  1040                           fsr2l	equ	0xFD9
  1041                           status	equ	0xFD8
  1042                           
  1043 ;; *************** function ___lwdiv *****************
  1044 ;; Defined at:
  1045 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  1046 ;; Parameters:    Size  Location     Type
  1047 ;;  dividend        2    0[COMRAM] unsigned int 
  1048 ;;  divisor         2    2[COMRAM] unsigned int 
  1049 ;; Auto vars:     Size  Location     Type
  1050 ;;  quotient        2    4[COMRAM] unsigned int 
  1051 ;;  counter         1    6[COMRAM] unsigned char 
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  2    0[COMRAM] unsigned int 
  1054 ;; Registers used:
  1055 ;;		wreg, status,2, status,0
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1061 ;;      Params:         4       0       0       0       0       0       0       0       0
  1062 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1063 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1064 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1065 ;;Total ram usage:        7 bytes
  1066 ;; Hardware stack levels used:    1
  1067 ;; This function calls:
  1068 ;;		Nothing
  1069 ;; This function is called by:
  1070 ;;		_sprintf
  1071 ;; This function uses a non-reentrant model
  1072 ;;
  1073                           
  1074                           	psect	text5
  1075  000A92                     __ptext5:
  1076                           	opt stack 0
  1077  000A92                     ___lwdiv:
  1078                           	opt stack 27
  1079                           
  1080                           ;incstack = 0
  1081  000A92  0E00               	movlw	0
  1082  000A94  6E06               	movwf	___lwdiv@quotient+1,c
  1083  000A96  0E00               	movlw	0
  1084  000A98  6E05               	movwf	___lwdiv@quotient,c
  1085  000A9A  5003               	movf	___lwdiv@divisor,w,c
  1086  000A9C  1004               	iorwf	___lwdiv@divisor+1,w,c
  1087  000A9E  B4D8               	btfsc	status,2,c
  1088  000AA0  D01C               	goto	i2l525
  1089  000AA2  0E01               	movlw	1
  1090  000AA4  6E07               	movwf	___lwdiv@counter,c
  1091  000AA6  D004               	goto	i2l926
  1092  000AA8                     i2l924:
  1093  000AA8  90D8               	bcf	status,0,c
  1094  000AAA  3603               	rlcf	___lwdiv@divisor,f,c
  1095  000AAC  3604               	rlcf	___lwdiv@divisor+1,f,c
  1096  000AAE  2A07               	incf	___lwdiv@counter,f,c
  1097  000AB0                     i2l926:
  1098  000AB0  AE04               	btfss	___lwdiv@divisor+1,7,c
  1099  000AB2  D7FA               	goto	i2l924
  1100  000AB4                     i2l928:
  1101  000AB4  90D8               	bcf	status,0,c
  1102  000AB6  3605               	rlcf	___lwdiv@quotient,f,c
  1103  000AB8  3606               	rlcf	___lwdiv@quotient+1,f,c
  1104  000ABA  5003               	movf	___lwdiv@divisor,w,c
  1105  000ABC  5C01               	subwf	___lwdiv@dividend,w,c
  1106  000ABE  5004               	movf	___lwdiv@divisor+1,w,c
  1107  000AC0  5802               	subwfb	___lwdiv@dividend+1,w,c
  1108  000AC2  A0D8               	btfss	status,0,c
  1109  000AC4  D005               	goto	i2l936
  1110  000AC6  5003               	movf	___lwdiv@divisor,w,c
  1111  000AC8  5E01               	subwf	___lwdiv@dividend,f,c
  1112  000ACA  5004               	movf	___lwdiv@divisor+1,w,c
  1113  000ACC  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1114  000ACE  8005               	bsf	___lwdiv@quotient,0,c
  1115  000AD0                     i2l936:
  1116  000AD0  90D8               	bcf	status,0,c
  1117  000AD2  3204               	rrcf	___lwdiv@divisor+1,f,c
  1118  000AD4  3203               	rrcf	___lwdiv@divisor,f,c
  1119  000AD6  2E07               	decfsz	___lwdiv@counter,f,c
  1120  000AD8  D7ED               	goto	i2l928
  1121  000ADA                     i2l525:
  1122  000ADA  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1123  000ADE  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1124  000AE2  0012               	return		;funcret
  1125  000AE4                     __end_of___lwdiv:
  1126                           	opt stack 0
  1127                           pclatu	equ	0xFFB
  1128                           pclath	equ	0xFFA
  1129                           tblptru	equ	0xFF8
  1130                           tblptrh	equ	0xFF7
  1131                           tblptrl	equ	0xFF6
  1132                           tablat	equ	0xFF5
  1133                           prodh	equ	0xFF4
  1134                           prodl	equ	0xFF3
  1135                           intcon	equ	0xFF2
  1136                           fsr0h	equ	0xFEA
  1137                           fsr0l	equ	0xFE9
  1138                           wreg	equ	0xFE8
  1139                           fsr1h	equ	0xFE2
  1140                           fsr1l	equ	0xFE1
  1141                           indf2	equ	0xFDF
  1142                           postinc2	equ	0xFDE
  1143                           postdec2	equ	0xFDD
  1144                           fsr2h	equ	0xFDA
  1145                           fsr2l	equ	0xFD9
  1146                           status	equ	0xFD8
  1147                           
  1148 ;; *************** function _sentsimple *****************
  1149 ;; Defined at:
  1150 ;;		line 17 in file "USART.c"
  1151 ;; Parameters:    Size  Location     Type
  1152 ;;  byte            1    wreg     unsigned char 
  1153 ;; Auto vars:     Size  Location     Type
  1154 ;;  byte            1    0[COMRAM] unsigned char 
  1155 ;; Return value:  Size  Location     Type
  1156 ;;		None               void
  1157 ;; Registers used:
  1158 ;;		wreg
  1159 ;; Tracked objects:
  1160 ;;		On entry : 0/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1164 ;;      Params:         0       0       0       0       0       0       0       0       0
  1165 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1166 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1167 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1168 ;;Total ram usage:        1 bytes
  1169 ;; Hardware stack levels used:    1
  1170 ;; This function calls:
  1171 ;;		Nothing
  1172 ;; This function is called by:
  1173 ;;		_INTR
  1174 ;; This function uses a non-reentrant model
  1175 ;;
  1176                           
  1177                           	psect	text6
  1178  000BB4                     __ptext6:
  1179                           	opt stack 0
  1180  000BB4                     _sentsimple:
  1181                           	opt stack 28
  1182                           
  1183                           ;incstack = 0
  1184                           ;sentsimple@byte stored from wreg
  1185  000BB4  6E01               	movwf	sentsimple@byte,c
  1186  000BB6                     i2l20:
  1187  000BB6  A89E               	btfss	3998,4,c	;volatile
  1188  000BB8  D7FE               	goto	i2l20
  1189                           
  1190                           ;USART.c: 20: TXREG = byte;
  1191  000BBA  C001  FFAD         	movff	sentsimple@byte,4013	;volatile
  1192  000BBE  0012               	return		;funcret
  1193  000BC0                     __end_of_sentsimple:
  1194                           	opt stack 0
  1195                           pclatu	equ	0xFFB
  1196                           pclath	equ	0xFFA
  1197                           tblptru	equ	0xFF8
  1198                           tblptrh	equ	0xFF7
  1199                           tblptrl	equ	0xFF6
  1200                           tablat	equ	0xFF5
  1201                           prodh	equ	0xFF4
  1202                           prodl	equ	0xFF3
  1203                           intcon	equ	0xFF2
  1204                           fsr0h	equ	0xFEA
  1205                           fsr0l	equ	0xFE9
  1206                           wreg	equ	0xFE8
  1207                           fsr1h	equ	0xFE2
  1208                           fsr1l	equ	0xFE1
  1209                           indf2	equ	0xFDF
  1210                           postinc2	equ	0xFDE
  1211                           postdec2	equ	0xFDD
  1212                           fsr2h	equ	0xFDA
  1213                           fsr2l	equ	0xFD9
  1214                           status	equ	0xFD8
  1215                           
  1216 ;; *************** function _sent *****************
  1217 ;; Defined at:
  1218 ;;		line 24 in file "USART.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;  data            2    0[COMRAM] PTR const unsigned char 
  1221 ;;		 -> INTR@buffs(10), 
  1222 ;;  cnt             2    2[COMRAM] int 
  1223 ;; Auto vars:     Size  Location     Type
  1224 ;;  i               2    5[COMRAM] int 
  1225 ;; Return value:  Size  Location     Type
  1226 ;;		None               void
  1227 ;; Registers used:
  1228 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1229 ;; Tracked objects:
  1230 ;;		On entry : 0/0
  1231 ;;		On exit  : 0/0
  1232 ;;		Unchanged: 0/0
  1233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1234 ;;      Params:         4       0       0       0       0       0       0       0       0
  1235 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1236 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1237 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1238 ;;Total ram usage:        7 bytes
  1239 ;; Hardware stack levels used:    1
  1240 ;; This function calls:
  1241 ;;		Nothing
  1242 ;; This function is called by:
  1243 ;;		_INTR
  1244 ;; This function uses a non-reentrant model
  1245 ;;
  1246                           
  1247                           	psect	text7
  1248  000B60                     __ptext7:
  1249                           	opt stack 0
  1250  000B60                     _sent:
  1251                           	opt stack 28
  1252                           
  1253                           ;USART.c: 25: int i;
  1254                           ;USART.c: 27: for(i =0 ; i < cnt ; i++){
  1255                           
  1256                           ;incstack = 0
  1257  000B60  0E00               	movlw	0
  1258  000B62  6E07               	movwf	sent@i+1,c
  1259  000B64  0E00               	movlw	0
  1260  000B66  6E06               	movwf	sent@i,c
  1261  000B68  D00C               	goto	i2l966
  1262  000B6A                     i2l28:
  1263  000B6A  A89E               	btfss	3998,4,c	;volatile
  1264  000B6C  D7FE               	goto	i2l28
  1265                           
  1266                           ;USART.c: 29: TXREG = *data++;
  1267  000B6E  C001  FFD9         	movff	sent@data,fsr2l
  1268  000B72  C002  FFDA         	movff	sent@data+1,fsr2h
  1269  000B76  50DF               	movf	indf2,w,c
  1270  000B78  6EAD               	movwf	4013,c	;volatile
  1271  000B7A  4A01               	infsnz	sent@data,f,c
  1272  000B7C  2A02               	incf	sent@data+1,f,c
  1273  000B7E  4A06               	infsnz	sent@i,f,c
  1274  000B80  2A07               	incf	sent@i+1,f,c
  1275  000B82                     i2l966:
  1276  000B82  5003               	movf	sent@cnt,w,c
  1277  000B84  5C06               	subwf	sent@i,w,c
  1278  000B86  5007               	movf	sent@i+1,w,c
  1279  000B88  0A80               	xorlw	128
  1280  000B8A  6E05               	movwf	??_sent& (0+255),c
  1281  000B8C  5004               	movf	sent@cnt+1,w,c
  1282  000B8E  0A80               	xorlw	128
  1283  000B90  5805               	subwfb	??_sent& (0+255),w,c
  1284  000B92  B0D8               	btfsc	status,0,c
  1285  000B94  0012               	return	
  1286  000B96  D7E9               	goto	i2l28
  1287  000B98                     __end_of_sent:
  1288                           	opt stack 0
  1289                           pclatu	equ	0xFFB
  1290                           pclath	equ	0xFFA
  1291                           tblptru	equ	0xFF8
  1292                           tblptrh	equ	0xFF7
  1293                           tblptrl	equ	0xFF6
  1294                           tablat	equ	0xFF5
  1295                           prodh	equ	0xFF4
  1296                           prodl	equ	0xFF3
  1297                           intcon	equ	0xFF2
  1298                           fsr0h	equ	0xFEA
  1299                           fsr0l	equ	0xFE9
  1300                           wreg	equ	0xFE8
  1301                           fsr1h	equ	0xFE2
  1302                           fsr1l	equ	0xFE1
  1303                           indf2	equ	0xFDF
  1304                           postinc2	equ	0xFDE
  1305                           postdec2	equ	0xFDD
  1306                           fsr2h	equ	0xFDA
  1307                           fsr2l	equ	0xFD9
  1308                           status	equ	0xFD8
  1309                           pclatu	equ	0xFFB
  1310                           pclath	equ	0xFFA
  1311                           tblptru	equ	0xFF8
  1312                           tblptrh	equ	0xFF7
  1313                           tblptrl	equ	0xFF6
  1314                           tablat	equ	0xFF5
  1315                           prodh	equ	0xFF4
  1316                           prodl	equ	0xFF3
  1317                           intcon	equ	0xFF2
  1318                           fsr0h	equ	0xFEA
  1319                           fsr0l	equ	0xFE9
  1320                           wreg	equ	0xFE8
  1321                           fsr1h	equ	0xFE2
  1322                           fsr1l	equ	0xFE1
  1323                           indf2	equ	0xFDF
  1324                           postinc2	equ	0xFDE
  1325                           postdec2	equ	0xFDD
  1326                           fsr2h	equ	0xFDA
  1327                           fsr2l	equ	0xFD9
  1328                           status	equ	0xFD8
  1329                           
  1330                           	psect	rparam
  1331  0000                     pclatu	equ	0xFFB
  1332                           pclath	equ	0xFFA
  1333                           tblptru	equ	0xFF8
  1334                           tblptrh	equ	0xFF7
  1335                           tblptrl	equ	0xFF6
  1336                           tablat	equ	0xFF5
  1337                           prodh	equ	0xFF4
  1338                           prodl	equ	0xFF3
  1339                           intcon	equ	0xFF2
  1340                           fsr0h	equ	0xFEA
  1341                           fsr0l	equ	0xFE9
  1342                           wreg	equ	0xFE8
  1343                           fsr1h	equ	0xFE2
  1344                           fsr1l	equ	0xFE1
  1345                           indf2	equ	0xFDF
  1346                           postinc2	equ	0xFDE
  1347                           postdec2	equ	0xFDD
  1348                           fsr2h	equ	0xFDA
  1349                           fsr2l	equ	0xFD9
  1350                           status	equ	0xFD8
  1351                           
  1352                           	psect	temp
  1353  000039                     btemp:
  1354                           	opt stack 0
  1355  000039                     	ds	1
  1356  0000                     int$flags	set	btemp
  1357                           pclatu	equ	0xFFB
  1358                           pclath	equ	0xFFA
  1359                           tblptru	equ	0xFF8
  1360                           tblptrh	equ	0xFF7
  1361                           tblptrl	equ	0xFF6
  1362                           tablat	equ	0xFF5
  1363                           prodh	equ	0xFF4
  1364                           prodl	equ	0xFF3
  1365                           intcon	equ	0xFF2
  1366                           fsr0h	equ	0xFEA
  1367                           fsr0l	equ	0xFE9
  1368                           wreg	equ	0xFE8
  1369                           fsr1h	equ	0xFE2
  1370                           fsr1l	equ	0xFE1
  1371                           indf2	equ	0xFDF
  1372                           postinc2	equ	0xFDE
  1373                           postdec2	equ	0xFDD
  1374                           fsr2h	equ	0xFDA
  1375                           fsr2l	equ	0xFD9
  1376                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     56      56
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 10
		 -> INTR@buffs(COMRAM[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sent@data	PTR const unsigned char  size(2) Largest target is 10
		 -> INTR@buffs(COMRAM[10]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTR in COMRAM

    _INTR->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                           _initUART
 ---------------------------------------------------------------------------------
 (1) _initUART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _INTR                                                30    30      0    1565
                                             26 COMRAM    30    30      0
                               _sent
                         _sentsimple
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             23    17      6    1182
                                             12 COMRAM    14     8      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _sentsimple                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _sent                                                 7     3      4     197
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initUART

 _INTR (ROOT)
   _sent
   _sentsimple
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5E     38      38       1       59.6%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Feb 02 19:25:20 2016

                     l92 0B5E              __CFG_BOR$ON 000000              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_LVP$ON 000000              __CFG_WDT$ON 000000  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000                      wreg 000FE8  
           __CFG_FOSC$HS 000000                     STR_1 080B                     i2l20 0BB6  
                   _RCIF 007CF5                     _INTR 0008                     i2l28 0B6A  
                   i2l88 0A56                     _TMR1 000FCE                     _TXIF 007CF4  
                   _main 0B26                     _sent 0B60                     fsr0h 000FEA  
                   fsr1h 000FE2                     fsr0l 000FE9                     fsr2h 000FDA  
                   fsr1l 000FE1                     indf2 000FDF                     fsr2l 000FD9  
                   btemp 0039                     pclat 000FFA                     prodh 000FF4  
                   prodl 000FF3                     start 0016            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000010                    ?_INTR 0001  
          __CFG_PLLDIV$1 000000                    INTR@i 0035           __CFG_CCP2MX$ON 000000  
                  ?_main 0001                    ?_sent 0001                    _T0CON 000FD5  
                  _T1CON 000FCD          __end_of___lwdiv 0AE4          __end_of___lwmod 0B26  
                  i2l525 0ADA                    i2l535 0B1C                    i2l924 0AA8  
                  i2l926 0AB0                    i2l936 0AD0                    i2l928 0AB4  
                  i2l952 0B12                    i2l944 0AF2                    i2l946 0AFA  
                  i2l970 081A                    i2l948 0AFE                    i2l966 0B82  
                  i2l982 085E                    i2l992 0886                    i2l976 0834  
                  i2l994 088A                    _RCREG 000FAE                    _RCSTA 000FAB  
                  _TMR0H 000FD7                    _TMR1H 000FCF                    _TMR0L 000FD6  
                  _TMR1L 000FCE                    _SPBRG 000FAF                    _PORTA 000F80  
          __CFG_USBDIV$1 000000                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TXREG 000FAD                    _TXSTA 000FAC  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000          __end_of_dpowers 080B  
                  tablat 000FF5                    sent@i 0006                    status 000FD8  
        __end_of_sprintf 0958           __CFG_ICPRT$OFF 000000             __end_of_INTR 0A92  
        __initialization 0B98             __end_of_main 0B60             __end_of_sent 0B98  
                 ??_INTR 001B                   ??_main 0000                   ??_sent 0005  
          __activetblptr 000002                   i2l1020 092A                   i2l1012 08D2  
                 i2l1014 08D8                   i2l1006 08B6                   i2l1022 0932  
                 i2l1024 094A                   i2l1042 09E4                   i2l1044 09EE  
                 i2l1036 09C4                   _INTCON 000FF2                   _TMR0IF 007F92  
         __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000         __end_of_initUART 0BB4  
              ??___lwdiv 0005                ??___lwmod 000C             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
              ??_sprintf 0013               __accesstop 0060  __end_of__initialization 0B98  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0001  
              INTR@buffs 0029                  INTR@cnt 0037                  i2u40_47 0A1A  
                i2u41_47 0A2C                  i2u42_47 0A34                  i2u39_47 0A0C  
              ?_initUART 0001          __CFG_VREGEN$OFF 000000                  __Hparam 0000  
                __Lparam 0000                  ___lwdiv 0A92                  ___lwmod 0AE4  
           __psmallconst 0800                  __pcinit 0B98                  __ramtop 0800  
                __ptext0 0B26                  __ptext1 0BA6                  __ptext3 0810  
                __ptext4 0AE4                  __ptext5 0A92                  __ptext6 0BB4  
                __ptext7 0B60                  _dpowers 0801                  _sprintf 0810  
         __pintcode_body 0958     end_of_initialization 0B98               ??_initUART 0000  
          __Lmediumconst 0000                  int_func 0958                  sent@cnt 0003  
                postdec2 000FDD                  postinc2 000FDE               _sentsimple 0BB4  
              _TRISCbits 000F94      start_initialization 0B98         __CFG_LPT1OSC$OFF 000000  
            ?_sentsimple 0001            __pcstackBANK0 0000                 INTR@data 0033  
            sprintf@flag 0016              sprintf@prec 0017        __size_of_initUART 000E  
       ___lwdiv@dividend 0001                __pintcode 0008                 ?___lwdiv 0001  
               ?___lwmod 0008              __smallconst 0800         ___lwdiv@quotient 0005  
               ?_sprintf 000D      __size_of_sentsimple 000C                 _RCONbits 000FD0  
       __CFG_WDTPS$32768 000000                 __Hrparam 0000                 __Lrparam 0000  
       __size_of___lwdiv 0052         __size_of___lwmod 0042               sprintf@val 0018  
        ___lwdiv@divisor 0003          ___lwdiv@counter 0007         __size_of_sprintf 0148  
          __size_of_INTR 0A8A                 _initUART 0BA6            __size_of_main 003A  
          __size_of_sent 0038                 int$flags 0039             ??_sentsimple 0001  
  __CFG_CPUDIV$OSC1_PLL2 000000               _INTCONbits 000FF2                 intlevel2 0000  
              sprintf@ap 0014                sprintf@sp 000D         ___lwmod@dividend 0008  
               sent@data 0001       __end_of_sentsimple 0BC0           sentsimple@byte 0001  
               sprintf@c 001A                 sprintf@f 000F          ___lwmod@divisor 000A  
        ___lwmod@counter 000C  
