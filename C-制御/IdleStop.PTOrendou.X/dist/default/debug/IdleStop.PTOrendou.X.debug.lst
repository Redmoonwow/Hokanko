

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Thu Nov 09 09:35:32 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	12F683
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	dabs	1,0x7E,2
    14  0000                     
    15                           ; Version 1.40
    16                           ; Generated 01/12/2016 GMT
    17                           ; 
    18                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC12F683 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     	;# 
    50  0001                     	;# 
    51  0002                     	;# 
    52  0003                     	;# 
    53  0004                     	;# 
    54  0005                     	;# 
    55  000A                     	;# 
    56  000B                     	;# 
    57  000C                     	;# 
    58  000E                     	;# 
    59  000E                     	;# 
    60  000F                     	;# 
    61  0010                     	;# 
    62  0011                     	;# 
    63  0012                     	;# 
    64  0013                     	;# 
    65  0013                     	;# 
    66  0014                     	;# 
    67  0015                     	;# 
    68  0018                     	;# 
    69  0019                     	;# 
    70  001A                     	;# 
    71  001E                     	;# 
    72  001F                     	;# 
    73  0081                     	;# 
    74  0085                     	;# 
    75  008C                     	;# 
    76  008E                     	;# 
    77  008F                     	;# 
    78  0090                     	;# 
    79  0092                     	;# 
    80  0095                     	;# 
    81  0095                     	;# 
    82  0096                     	;# 
    83  0096                     	;# 
    84  0099                     	;# 
    85  009A                     	;# 
    86  009A                     	;# 
    87  009B                     	;# 
    88  009C                     	;# 
    89  009D                     	;# 
    90  009E                     	;# 
    91  009F                     	;# 
    92  0005                     _GPIObits	set	5
    93  000B                     _INTCONbits	set	11
    94  0001                     _TMR0	set	1
    95  009F                     _ANSEL	set	159
    96  0081                     _OPTION_REG	set	129
    97  008F                     _OSCCON	set	143
    98  0085                     _TRISIObits	set	133
    99                           
   100                           ; #config settings
   101  0000                     
   102                           	psect	cinit
   103  0010                     start_initialization:	
   104  0010                     __initialization:	
   105                           
   106                           ; Clear objects allocated to COMMON
   107  0010  01F1               	clrf	__pbssCOMMON& (0+127)
   108  0011  01F2               	clrf	(__pbssCOMMON+1)& (0+127)
   109  0012  01F3               	clrf	(__pbssCOMMON+2)& (0+127)
   110  0013  01F4               	clrf	(__pbssCOMMON+3)& (0+127)
   111  0014  01F5               	clrf	(__pbssCOMMON+4)& (0+127)
   112  0015  01F6               	clrf	(__pbssCOMMON+5)& (0+127)
   113                           
   114                           ; Clear objects allocated to BANK0
   115  0016  01A0               	clrf	__pbssBANK0& (0+127)
   116  0017  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   117  0018  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   118  0019  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   119  001A  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   120  001B  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   121  001C                     end_of_initialization:	
   122                           ;End of C runtime variable initialization code
   123                           
   124  001C                     __end_of__initialization:	
   125  001C  0183               	clrf	3
   126  001D  281E               	ljmp	_main	;jump to C main() function
   127                           
   128                           	psect	bssCOMMON
   129  0071                     __pbssCOMMON:	
   130  0071                     _PTO__ON:	
   131  0071                     	ds	2
   132  0073                     _SEC:	
   133  0073                     	ds	2
   134  0075                     _STEP:	
   135  0075                     	ds	2
   136                           
   137                           	psect	bssBANK0
   138  0020                     __pbssBANK0:	
   139  0020                     _EMR:	
   140  0020                     	ds	2
   141  0022                     _EMR_TMR:	
   142  0022                     	ds	2
   143  0024                     _IDLESTOP:	
   144  0024                     	ds	2
   145                           
   146                           	psect	cstackCOMMON
   147  0077                     __pcstackCOMMON:	
   148  0077                     ?_ISR:	
   149  0077                     ??_ISR:	
   150                           ; 1 bytes @ 0x0
   151                           
   152  0077                     ?_main:	
   153                           ; 1 bytes @ 0x0
   154                           
   155                           
   156                           ; 1 bytes @ 0x0
   157  0077                     	ds	4
   158                           
   159                           	psect	cstackBANK0
   160  0026                     __pcstackBANK0:	
   161  0026                     ?_SECSTART:	
   162  0026                     SECSTART@TMR0_CNT:	
   163                           ; 1 bytes @ 0x0
   164                           
   165                           
   166                           ; 2 bytes @ 0x0
   167  0026                     	ds	2
   168  0028                     ??_SECSTART:	
   169  0028                     ??_main:	
   170                           ; 1 bytes @ 0x2
   171                           
   172                           
   173                           	psect	maintext
   174  001E                     __pmaintext:	
   175                           ; 1 bytes @ 0x2
   176 ;;
   177 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   178 ;;
   179 ;; *************** function _main *****************
   180 ;; Defined at:
   181 ;;		line 48 in file "main.c"
   182 ;; Parameters:    Size  Location     Type
   183 ;;		None
   184 ;; Auto vars:     Size  Location     Type
   185 ;;		None
   186 ;; Return value:  Size  Location     Type
   187 ;;                  1    wreg      void 
   188 ;; Registers used:
   189 ;;		wreg, status,2, status,0, pclath, cstack
   190 ;; Tracked objects:
   191 ;;		On entry : B00/0
   192 ;;		On exit  : 0/0
   193 ;;		Unchanged: 0/0
   194 ;; Data sizes:     COMMON   BANK0   BANK1
   195 ;;      Params:         0       0       0
   196 ;;      Locals:         0       0       0
   197 ;;      Temps:          0       0       0
   198 ;;      Totals:         0       0       0
   199 ;;Total ram usage:        0 bytes
   200 ;; Hardware stack levels required when called:    2
   201 ;; This function calls:
   202 ;;		_SECSTART
   203 ;; This function is called by:
   204 ;;		Startup code after reset
   205 ;; This function uses a non-reentrant model
   206 ;;
   207                           
   208                           
   209                           ;psect for function _main
   210  001E                     _main:	
   211                           
   212                           ;main.c: 50: OSCCON = 0b00000001;
   213                           
   214                           ;incstack = 0
   215                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   216  001E  3001               	movlw	1
   217  001F  1683               	bsf	3,5	;RP0=1, select bank1
   218  0020  008F               	movwf	15	;volatile
   219                           
   220                           ;main.c: 51: OPTION_REG = 0b10000101;
   221  0021  3085               	movlw	133
   222  0022  0081               	movwf	1	;volatile
   223                           
   224                           ;main.c: 52: ANSEL = 0x00;
   225  0023  019F               	clrf	31	;volatile
   226                           
   227                           ;main.c: 53: TRISIObits.TRISIO2 = 0;
   228  0024  1105               	bcf	5,2	;volatile
   229                           
   230                           ;main.c: 54: TRISIObits.TRISIO4 = 1;
   231  0025  1605               	bsf	5,4	;volatile
   232                           
   233                           ;main.c: 55: TRISIObits.TRISIO5 = 1;
   234  0026  1685               	bsf	5,5	;volatile
   235                           
   236                           ;main.c: 60: GPIObits.GP2 = 0;
   237  0027  1283               	bcf	3,5	;RP0=0, select bank0
   238  0028  1105               	bcf	5,2	;volatile
   239                           
   240                           ;main.c: 63: SEC = 0;
   241  0029  01F3               	clrf	_SEC
   242  002A  01F4               	clrf	_SEC+1
   243                           
   244                           ;main.c: 64: STEP = 0;
   245  002B  01F5               	clrf	_STEP
   246  002C  01F6               	clrf	_STEP+1
   247                           
   248                           ;main.c: 65: PTO__ON = 0;
   249  002D  01F1               	clrf	_PTO__ON
   250  002E  01F2               	clrf	_PTO__ON+1
   251                           
   252                           ;main.c: 66: IDLESTOP = 0;
   253  002F  01A4               	clrf	_IDLESTOP
   254  0030  01A5               	clrf	_IDLESTOP+1
   255                           
   256                           ;main.c: 67: EMR = 0;
   257  0031  01A0               	clrf	_EMR
   258  0032  01A1               	clrf	_EMR+1
   259                           
   260                           ;main.c: 68: EMR_TMR = 0;
   261  0033  01A2               	clrf	_EMR_TMR
   262  0034  01A3               	clrf	_EMR_TMR+1
   263  0035                     l961:	
   264                           ;main.c: 70: for(;;){
   265                           
   266                           
   267                           ;main.c: 74: if(GPIObits.GP4 == 0 && STEP == 0 && PTO__ON == 0 && SEC == 0){
   268  0035  1A05               	btfsc	5,4	;volatile
   269  0036  284D               	goto	l975
   270  0037  0875               	movf	_STEP,w
   271  0038  0476               	iorwf	_STEP+1,w
   272  0039  1D03               	btfss	3,2
   273  003A  284D               	goto	l975
   274  003B  0871               	movf	_PTO__ON,w
   275  003C  0472               	iorwf	_PTO__ON+1,w
   276  003D  1D03               	btfss	3,2
   277  003E  284D               	goto	l975
   278  003F  0873               	movf	_SEC,w
   279  0040  0474               	iorwf	_SEC+1,w
   280  0041  1D03               	btfss	3,2
   281  0042  284D               	goto	l975
   282                           
   283                           ;main.c: 75: GPIObits.GP2 = 1;
   284  0043  1505               	bsf	5,2	;volatile
   285                           
   286                           ;main.c: 76: PTO__ON = 1;
   287  0044  3001               	movlw	1
   288  0045  00F1               	movwf	_PTO__ON
   289  0046  3000               	movlw	0
   290  0047  00F2               	movwf	_PTO__ON+1
   291                           
   292                           ;main.c: 77: SECSTART(135);
   293  0048  3087               	movlw	135
   294  0049  00A6               	movwf	SECSTART@TMR0_CNT
   295  004A  3000               	movlw	0
   296  004B  00A7               	movwf	SECSTART@TMR0_CNT+1
   297  004C  21B6               	fcall	_SECSTART
   298  004D                     l975:	
   299                           
   300                           ;main.c: 78: }
   301                           ;main.c: 80: if(GPIObits.GP4 == 0 && STEP == 0 && PTO__ON == 1 && SEC == 1){
   302  004D  1283               	bcf	3,5	;RP0=0, select bank0
   303  004E  1A05               	btfsc	5,4	;volatile
   304  004F  2867               	goto	l989
   305  0050  0875               	movf	_STEP,w
   306  0051  0476               	iorwf	_STEP+1,w
   307  0052  1D03               	btfss	3,2
   308  0053  2867               	goto	l989
   309  0054  0371               	decf	_PTO__ON,w
   310  0055  0472               	iorwf	_PTO__ON+1,w
   311  0056  1D03               	btfss	3,2
   312  0057  2867               	goto	l989
   313  0058  0373               	decf	_SEC,w
   314  0059  0474               	iorwf	_SEC+1,w
   315  005A  1D03               	btfss	3,2
   316  005B  2867               	goto	l989
   317                           
   318                           ;main.c: 81: GPIObits.GP2 = 0;
   319  005C  1105               	bcf	5,2	;volatile
   320                           
   321                           ;main.c: 82: PTO__ON = PTO__ON + 1;
   322  005D  0871               	movf	_PTO__ON,w
   323  005E  3E01               	addlw	1
   324  005F  00F1               	movwf	_PTO__ON
   325  0060  0872               	movf	_PTO__ON+1,w
   326  0061  1803               	skipnc
   327  0062  3E01               	addlw	1
   328  0063  3E00               	addlw	0
   329  0064  00F2               	movwf	_PTO__ON+1
   330                           
   331                           ;main.c: 83: SEC = 0;
   332  0065  01F3               	clrf	_SEC
   333  0066  01F4               	clrf	_SEC+1
   334  0067                     l989:	
   335                           
   336                           ;main.c: 85: }
   337                           ;main.c: 87: if(GPIObits.GP4 == 1 && STEP == 0 && PTO__ON == 1){
   338  0067  1E05               	btfss	5,4	;volatile
   339  0068  287D               	goto	l1001
   340  0069  0875               	movf	_STEP,w
   341  006A  0476               	iorwf	_STEP+1,w
   342  006B  1D03               	btfss	3,2
   343  006C  287D               	goto	l1001
   344  006D  0371               	decf	_PTO__ON,w
   345  006E  0472               	iorwf	_PTO__ON+1,w
   346  006F  1D03               	btfss	3,2
   347  0070  287D               	goto	l1001
   348                           
   349                           ;main.c: 88: INTCONbits.GIE = 0;
   350  0071  138B               	bcf	11,7	;volatile
   351                           
   352                           ;main.c: 89: INTCONbits.T0IE = 0;
   353  0072  128B               	bcf	11,5	;volatile
   354                           
   355                           ;main.c: 90: INTCONbits.T0IF = 0;
   356  0073  110B               	bcf	11,2	;volatile
   357                           
   358                           ;main.c: 91: EMR = 1;
   359  0074  3001               	movlw	1
   360  0075  00A0               	movwf	_EMR
   361  0076  3000               	movlw	0
   362  0077  00A1               	movwf	_EMR+1
   363                           
   364                           ;main.c: 92: SECSTART(135);
   365  0078  3087               	movlw	135
   366  0079  00A6               	movwf	SECSTART@TMR0_CNT
   367  007A  3000               	movlw	0
   368  007B  00A7               	movwf	SECSTART@TMR0_CNT+1
   369  007C  21B6               	fcall	_SECSTART
   370  007D                     l1001:	
   371                           
   372                           ;main.c: 93: }
   373                           ;main.c: 95: if(STEP == 0 && PTO__ON == 1 && EMR == 1 ){
   374  007D  0875               	movf	_STEP,w
   375  007E  0476               	iorwf	_STEP+1,w
   376  007F  1D03               	btfss	3,2
   377  0080  28A0               	goto	l1013
   378  0081  0371               	decf	_PTO__ON,w
   379  0082  0472               	iorwf	_PTO__ON+1,w
   380  0083  1D03               	btfss	3,2
   381  0084  28A0               	goto	l1013
   382  0085  1283               	bcf	3,5	;RP0=0, select bank0
   383  0086  0320               	decf	_EMR,w
   384  0087  0421               	iorwf	_EMR+1,w
   385  0088  1D03               	btfss	3,2
   386  0089  28A0               	goto	l1013
   387                           
   388                           ;main.c: 96: GPIObits.GP2 = 0;
   389  008A  1105               	bcf	5,2	;volatile
   390                           
   391                           ;main.c: 97: PTO__ON = PTO__ON + 1;
   392  008B  0871               	movf	_PTO__ON,w
   393  008C  3E01               	addlw	1
   394  008D  00F1               	movwf	_PTO__ON
   395  008E  0872               	movf	_PTO__ON+1,w
   396  008F  1803               	skipnc
   397  0090  3E01               	addlw	1
   398  0091  3E00               	addlw	0
   399  0092  00F2               	movwf	_PTO__ON+1
   400                           
   401                           ;main.c: 98: EMR = EMR + 1;
   402  0093  0820               	movf	_EMR,w
   403  0094  3E01               	addlw	1
   404  0095  00A0               	movwf	_EMR
   405  0096  0821               	movf	_EMR+1,w
   406  0097  1803               	skipnc
   407  0098  3E01               	addlw	1
   408  0099  3E00               	addlw	0
   409  009A  00A1               	movwf	_EMR+1
   410                           
   411                           ;main.c: 99: SECSTART(135);
   412  009B  3087               	movlw	135
   413  009C  00A6               	movwf	SECSTART@TMR0_CNT
   414  009D  3000               	movlw	0
   415  009E  00A7               	movwf	SECSTART@TMR0_CNT+1
   416  009F  21B6               	fcall	_SECSTART
   417  00A0                     l1013:	
   418                           
   419                           ;main.c: 100: }
   420                           ;main.c: 102: if(STEP == 0 && PTO__ON == 2 && EMR == 2 && SEC == 2){
   421  00A0  0875               	movf	_STEP,w
   422  00A1  0476               	iorwf	_STEP+1,w
   423  00A2  1D03               	btfss	3,2
   424  00A3  28C2               	goto	l1027
   425  00A4  3002               	movlw	2
   426  00A5  0671               	xorwf	_PTO__ON,w
   427  00A6  0472               	iorwf	_PTO__ON+1,w
   428  00A7  1D03               	btfss	3,2
   429  00A8  28C2               	goto	l1027
   430  00A9  3002               	movlw	2
   431  00AA  1283               	bcf	3,5	;RP0=0, select bank0
   432  00AB  0620               	xorwf	_EMR,w
   433  00AC  0421               	iorwf	_EMR+1,w
   434  00AD  1D03               	btfss	3,2
   435  00AE  28C2               	goto	l1027
   436  00AF  3002               	movlw	2
   437  00B0  0673               	xorwf	_SEC,w
   438  00B1  0474               	iorwf	_SEC+1,w
   439  00B2  1D03               	btfss	3,2
   440  00B3  28C2               	goto	l1027
   441                           
   442                           ;main.c: 103: GPIObits.GP2 = 1;
   443  00B4  1505               	bsf	5,2	;volatile
   444                           
   445                           ;main.c: 104: EMR = EMR + 1;
   446  00B5  0820               	movf	_EMR,w
   447  00B6  3E01               	addlw	1
   448  00B7  00A0               	movwf	_EMR
   449  00B8  0821               	movf	_EMR+1,w
   450  00B9  1803               	skipnc
   451  00BA  3E01               	addlw	1
   452  00BB  3E00               	addlw	0
   453  00BC  00A1               	movwf	_EMR+1
   454                           
   455                           ;main.c: 105: SECSTART(135);
   456  00BD  3087               	movlw	135
   457  00BE  00A6               	movwf	SECSTART@TMR0_CNT
   458  00BF  3000               	movlw	0
   459  00C0  00A7               	movwf	SECSTART@TMR0_CNT+1
   460  00C1  21B6               	fcall	_SECSTART
   461  00C2                     l1027:	
   462                           
   463                           ;main.c: 106: }
   464                           ;main.c: 108: if(STEP == 0 && PTO__ON == 1 && EMR == 3 && SEC == 3){
   465  00C2  0875               	movf	_STEP,w
   466  00C3  0476               	iorwf	_STEP+1,w
   467  00C4  1D03               	btfss	3,2
   468  00C5  28DC               	goto	l1039
   469  00C6  0371               	decf	_PTO__ON,w
   470  00C7  0472               	iorwf	_PTO__ON+1,w
   471  00C8  1D03               	btfss	3,2
   472  00C9  28DC               	goto	l1039
   473  00CA  3003               	movlw	3
   474  00CB  1283               	bcf	3,5	;RP0=0, select bank0
   475  00CC  0620               	xorwf	_EMR,w
   476  00CD  0421               	iorwf	_EMR+1,w
   477  00CE  1D03               	btfss	3,2
   478  00CF  28DC               	goto	l1039
   479  00D0  3003               	movlw	3
   480  00D1  0673               	xorwf	_SEC,w
   481  00D2  0474               	iorwf	_SEC+1,w
   482  00D3  1D03               	btfss	3,2
   483  00D4  28DC               	goto	l1039
   484                           
   485                           ;main.c: 109: GPIObits.GP2 = 0;
   486  00D5  1105               	bcf	5,2	;volatile
   487                           
   488                           ;main.c: 110: EMR = 0;
   489  00D6  01A0               	clrf	_EMR
   490  00D7  01A1               	clrf	_EMR+1
   491                           
   492                           ;main.c: 111: PTO__ON = 0;
   493  00D8  01F1               	clrf	_PTO__ON
   494  00D9  01F2               	clrf	_PTO__ON+1
   495                           
   496                           ;main.c: 112: SEC = 0;
   497  00DA  01F3               	clrf	_SEC
   498  00DB  01F4               	clrf	_SEC+1
   499  00DC                     l1039:	
   500                           
   501                           ;main.c: 113: }
   502                           ;main.c: 123: if(GPIObits.GP4 == 1 && STEP == 0 && PTO__ON == 2 && SEC == 0){
   503  00DC  1283               	bcf	3,5	;RP0=0, select bank0
   504  00DD  1E05               	btfss	5,4	;volatile
   505  00DE  28FA               	goto	l1053
   506  00DF  0875               	movf	_STEP,w
   507  00E0  0476               	iorwf	_STEP+1,w
   508  00E1  1D03               	btfss	3,2
   509  00E2  28FA               	goto	l1053
   510  00E3  3002               	movlw	2
   511  00E4  0671               	xorwf	_PTO__ON,w
   512  00E5  0472               	iorwf	_PTO__ON+1,w
   513  00E6  1D03               	btfss	3,2
   514  00E7  28FA               	goto	l1053
   515  00E8  0873               	movf	_SEC,w
   516  00E9  0474               	iorwf	_SEC+1,w
   517  00EA  1D03               	btfss	3,2
   518  00EB  28FA               	goto	l1053
   519                           
   520                           ;main.c: 124: GPIObits.GP2 = 1;
   521  00EC  1505               	bsf	5,2	;volatile
   522                           
   523                           ;main.c: 125: PTO__ON = PTO__ON + 1;
   524  00ED  0871               	movf	_PTO__ON,w
   525  00EE  3E01               	addlw	1
   526  00EF  00F1               	movwf	_PTO__ON
   527  00F0  0872               	movf	_PTO__ON+1,w
   528  00F1  1803               	skipnc
   529  00F2  3E01               	addlw	1
   530  00F3  3E00               	addlw	0
   531  00F4  00F2               	movwf	_PTO__ON+1
   532                           
   533                           ;main.c: 126: SECSTART(135);
   534  00F5  3087               	movlw	135
   535  00F6  00A6               	movwf	SECSTART@TMR0_CNT
   536  00F7  3000               	movlw	0
   537  00F8  00A7               	movwf	SECSTART@TMR0_CNT+1
   538  00F9  21B6               	fcall	_SECSTART
   539  00FA                     l1053:	
   540                           
   541                           ;main.c: 127: }
   542                           ;main.c: 129: if(GPIObits.GP4 == 1 && STEP == 0 && PTO__ON == 3 && SEC == 1){
   543  00FA  1283               	bcf	3,5	;RP0=0, select bank0
   544  00FB  1E05               	btfss	5,4	;volatile
   545  00FC  2917               	goto	l1069
   546  00FD  0875               	movf	_STEP,w
   547  00FE  0476               	iorwf	_STEP+1,w
   548  00FF  1D03               	btfss	3,2
   549  0100  2917               	goto	l1069
   550  0101  3003               	movlw	3
   551  0102  0671               	xorwf	_PTO__ON,w
   552  0103  0472               	iorwf	_PTO__ON+1,w
   553  0104  1D03               	btfss	3,2
   554  0105  2917               	goto	l1069
   555  0106  0373               	decf	_SEC,w
   556  0107  0474               	iorwf	_SEC+1,w
   557  0108  1D03               	btfss	3,2
   558  0109  2917               	goto	l1069
   559                           
   560                           ;main.c: 130: GPIObits.GP2 = 0;
   561  010A  1105               	bcf	5,2	;volatile
   562                           
   563                           ;main.c: 131: PTO__ON = PTO__ON + 1;
   564  010B  0871               	movf	_PTO__ON,w
   565  010C  3E01               	addlw	1
   566  010D  00F1               	movwf	_PTO__ON
   567  010E  0872               	movf	_PTO__ON+1,w
   568  010F  1803               	skipnc
   569  0110  3E01               	addlw	1
   570  0111  3E00               	addlw	0
   571  0112  00F2               	movwf	_PTO__ON+1
   572                           
   573                           ;main.c: 133: SEC = 0;
   574  0113  01F3               	clrf	_SEC
   575  0114  01F4               	clrf	_SEC+1
   576                           
   577                           ;main.c: 134: PTO__ON = 0;
   578  0115  01F1               	clrf	_PTO__ON
   579  0116  01F2               	clrf	_PTO__ON+1
   580  0117                     l1069:	
   581                           
   582                           ;main.c: 135: }
   583                           ;main.c: 146: if(GPIObits.GP5 == 0 && STEP == 0){
   584  0117  1A85               	btfsc	5,5	;volatile
   585  0118  292B               	goto	l1079
   586  0119  0875               	movf	_STEP,w
   587  011A  0476               	iorwf	_STEP+1,w
   588  011B  1D03               	btfss	3,2
   589  011C  292B               	goto	l1079
   590                           
   591                           ;main.c: 147: GPIObits.GP2 = 1;
   592  011D  1505               	bsf	5,2	;volatile
   593                           
   594                           ;main.c: 148: STEP = STEP + 1;
   595  011E  0875               	movf	_STEP,w
   596  011F  3E01               	addlw	1
   597  0120  00F5               	movwf	_STEP
   598  0121  0876               	movf	_STEP+1,w
   599  0122  1803               	skipnc
   600  0123  3E01               	addlw	1
   601  0124  3E00               	addlw	0
   602  0125  00F6               	movwf	_STEP+1
   603                           
   604                           ;main.c: 149: SECSTART(135);
   605  0126  3087               	movlw	135
   606  0127  00A6               	movwf	SECSTART@TMR0_CNT
   607  0128  3000               	movlw	0
   608  0129  00A7               	movwf	SECSTART@TMR0_CNT+1
   609  012A  21B6               	fcall	_SECSTART
   610  012B                     l1079:	
   611                           
   612                           ;main.c: 150: }
   613                           ;main.c: 152: if(GPIObits.GP5 == 1 && SEC == 1 && STEP == 1){
   614  012B  1283               	bcf	3,5	;RP0=0, select bank0
   615  012C  1E85               	btfss	5,5	;volatile
   616  012D  2944               	goto	l1091
   617  012E  0373               	decf	_SEC,w
   618  012F  0474               	iorwf	_SEC+1,w
   619  0130  1D03               	btfss	3,2
   620  0131  2944               	goto	l1091
   621  0132  0375               	decf	_STEP,w
   622  0133  0476               	iorwf	_STEP+1,w
   623  0134  1D03               	btfss	3,2
   624  0135  2944               	goto	l1091
   625                           
   626                           ;main.c: 153: GPIObits.GP2 = 0;
   627  0136  1105               	bcf	5,2	;volatile
   628                           
   629                           ;main.c: 154: STEP = STEP + 1;
   630  0137  0875               	movf	_STEP,w
   631  0138  3E01               	addlw	1
   632  0139  00F5               	movwf	_STEP
   633  013A  0876               	movf	_STEP+1,w
   634  013B  1803               	skipnc
   635  013C  3E01               	addlw	1
   636  013D  3E00               	addlw	0
   637  013E  00F6               	movwf	_STEP+1
   638                           
   639                           ;main.c: 155: SECSTART(135);
   640  013F  3087               	movlw	135
   641  0140  00A6               	movwf	SECSTART@TMR0_CNT
   642  0141  3000               	movlw	0
   643  0142  00A7               	movwf	SECSTART@TMR0_CNT+1
   644  0143  21B6               	fcall	_SECSTART
   645  0144                     l1091:	
   646                           
   647                           ;main.c: 156: }
   648                           ;main.c: 158: if(GPIObits.GP5 == 1 && SEC == 2 && STEP == 2){
   649  0144  1283               	bcf	3,5	;RP0=0, select bank0
   650  0145  1E85               	btfss	5,5	;volatile
   651  0146  295B               	goto	l1101
   652  0147  3002               	movlw	2
   653  0148  0673               	xorwf	_SEC,w
   654  0149  0474               	iorwf	_SEC+1,w
   655  014A  1D03               	btfss	3,2
   656  014B  295B               	goto	l1101
   657  014C  3002               	movlw	2
   658  014D  0675               	xorwf	_STEP,w
   659  014E  0476               	iorwf	_STEP+1,w
   660  014F  1D03               	btfss	3,2
   661  0150  295B               	goto	l1101
   662                           
   663                           ;main.c: 159: STEP = STEP + 1;
   664  0151  0875               	movf	_STEP,w
   665  0152  3E01               	addlw	1
   666  0153  00F5               	movwf	_STEP
   667  0154  0876               	movf	_STEP+1,w
   668  0155  1803               	skipnc
   669  0156  3E01               	addlw	1
   670  0157  3E00               	addlw	0
   671  0158  00F6               	movwf	_STEP+1
   672                           
   673                           ;main.c: 160: SEC = 0;
   674  0159  01F3               	clrf	_SEC
   675  015A  01F4               	clrf	_SEC+1
   676  015B                     l1101:	
   677                           
   678                           ;main.c: 161: }
   679                           ;main.c: 165: if(GPIObits.GP5 == 0 && STEP == 3 && SEC == 0){
   680  015B  1A85               	btfsc	5,5	;volatile
   681  015C  2974               	goto	l1113
   682  015D  3003               	movlw	3
   683  015E  0675               	xorwf	_STEP,w
   684  015F  0476               	iorwf	_STEP+1,w
   685  0160  1D03               	btfss	3,2
   686  0161  2974               	goto	l1113
   687  0162  0873               	movf	_SEC,w
   688  0163  0474               	iorwf	_SEC+1,w
   689  0164  1D03               	btfss	3,2
   690  0165  2974               	goto	l1113
   691                           
   692                           ;main.c: 166: GPIObits.GP2 = 1;
   693  0166  1505               	bsf	5,2	;volatile
   694                           
   695                           ;main.c: 167: STEP = STEP + 1;
   696  0167  0875               	movf	_STEP,w
   697  0168  3E01               	addlw	1
   698  0169  00F5               	movwf	_STEP
   699  016A  0876               	movf	_STEP+1,w
   700  016B  1803               	skipnc
   701  016C  3E01               	addlw	1
   702  016D  3E00               	addlw	0
   703  016E  00F6               	movwf	_STEP+1
   704                           
   705                           ;main.c: 168: SECSTART(135);
   706  016F  3087               	movlw	135
   707  0170  00A6               	movwf	SECSTART@TMR0_CNT
   708  0171  3000               	movlw	0
   709  0172  00A7               	movwf	SECSTART@TMR0_CNT+1
   710  0173  21B6               	fcall	_SECSTART
   711  0174                     l1113:	
   712                           
   713                           ;main.c: 169: }
   714                           ;main.c: 171: if(GPIObits.GP5 == 1 && SEC == 1 && STEP == 4){
   715  0174  1283               	bcf	3,5	;RP0=0, select bank0
   716  0175  1E85               	btfss	5,5	;volatile
   717  0176  298E               	goto	l1125
   718  0177  0373               	decf	_SEC,w
   719  0178  0474               	iorwf	_SEC+1,w
   720  0179  1D03               	btfss	3,2
   721  017A  298E               	goto	l1125
   722  017B  3004               	movlw	4
   723  017C  0675               	xorwf	_STEP,w
   724  017D  0476               	iorwf	_STEP+1,w
   725  017E  1D03               	btfss	3,2
   726  017F  298E               	goto	l1125
   727                           
   728                           ;main.c: 172: GPIObits.GP2 = 0;
   729  0180  1105               	bcf	5,2	;volatile
   730                           
   731                           ;main.c: 173: STEP = STEP +1;
   732  0181  0875               	movf	_STEP,w
   733  0182  3E01               	addlw	1
   734  0183  00F5               	movwf	_STEP
   735  0184  0876               	movf	_STEP+1,w
   736  0185  1803               	skipnc
   737  0186  3E01               	addlw	1
   738  0187  3E00               	addlw	0
   739  0188  00F6               	movwf	_STEP+1
   740                           
   741                           ;main.c: 174: SECSTART(135);
   742  0189  3087               	movlw	135
   743  018A  00A6               	movwf	SECSTART@TMR0_CNT
   744  018B  3000               	movlw	0
   745  018C  00A7               	movwf	SECSTART@TMR0_CNT+1
   746  018D  21B6               	fcall	_SECSTART
   747  018E                     l1125:	
   748                           
   749                           ;main.c: 175: }
   750                           ;main.c: 177: if(GPIObits.GP5 == 1 && SEC == 2 && STEP == 5){
   751  018E  1283               	bcf	3,5	;RP0=0, select bank0
   752  018F  1E85               	btfss	5,5	;volatile
   753  0190  2835               	goto	l961
   754  0191  3002               	movlw	2
   755  0192  0673               	xorwf	_SEC,w
   756  0193  0474               	iorwf	_SEC+1,w
   757  0194  1D03               	btfss	3,2
   758  0195  2835               	goto	l961
   759  0196  3005               	movlw	5
   760  0197  0675               	xorwf	_STEP,w
   761  0198  0476               	iorwf	_STEP+1,w
   762  0199  1D03               	btfss	3,2
   763  019A  2835               	goto	l961
   764                           
   765                           ;main.c: 178: STEP = 0;
   766  019B  01F5               	clrf	_STEP
   767  019C  01F6               	clrf	_STEP+1
   768                           
   769                           ;main.c: 179: SEC = 0;
   770  019D  01F3               	clrf	_SEC
   771  019E  01F4               	clrf	_SEC+1
   772                           
   773                           ;main.c: 180: }
   774                           ;main.c: 184: }
   775  019F  2835               	goto	l961
   776  01A0                     __end_of_main:	
   777                           ;main.c: 185: return;
   778                           
   779                           
   780                           	psect	text1
   781  01B6                     __ptext1:	
   782 ;; *************** function _SECSTART *****************
   783 ;; Defined at:
   784 ;;		line 188 in file "main.c"
   785 ;; Parameters:    Size  Location     Type
   786 ;;  TMR0_CNT        2    0[BANK0 ] int 
   787 ;; Auto vars:     Size  Location     Type
   788 ;;		None
   789 ;; Return value:  Size  Location     Type
   790 ;;                  1    wreg      void 
   791 ;; Registers used:
   792 ;;		wreg
   793 ;; Tracked objects:
   794 ;;		On entry : 0/0
   795 ;;		On exit  : 0/0
   796 ;;		Unchanged: 0/0
   797 ;; Data sizes:     COMMON   BANK0   BANK1
   798 ;;      Params:         0       2       0
   799 ;;      Locals:         0       0       0
   800 ;;      Temps:          0       0       0
   801 ;;      Totals:         0       2       0
   802 ;;Total ram usage:        2 bytes
   803 ;; Hardware stack levels used:    1
   804 ;; Hardware stack levels required when called:    1
   805 ;; This function calls:
   806 ;;		Nothing
   807 ;; This function is called by:
   808 ;;		_main
   809 ;; This function uses a non-reentrant model
   810 ;;
   811                           
   812                           
   813                           ;psect for function _SECSTART
   814  01B6                     _SECSTART:	
   815                           
   816                           ;main.c: 189: TMR0 = TMR0_CNT;
   817                           
   818                           ;incstack = 0
   819                           ; Regs used in _SECSTART: [wreg]
   820  01B6  1283               	bcf	3,5	;RP0=0, select bank0
   821  01B7  0826               	movf	SECSTART@TMR0_CNT,w
   822  01B8  0081               	movwf	1	;volatile
   823                           
   824                           ;main.c: 190: INTCONbits.GIE = 1;
   825  01B9  178B               	bsf	11,7	;volatile
   826                           
   827                           ;main.c: 191: INTCONbits.T0IF = 0;
   828  01BA  110B               	bcf	11,2	;volatile
   829                           
   830                           ;main.c: 192: INTCONbits.T0IE = 1;
   831  01BB  168B               	bsf	11,5	;volatile
   832  01BC  0008               	return
   833  01BD                     __end_of_SECSTART:	
   834                           
   835                           	psect	text2
   836  01A0                     __ptext2:	
   837 ;; *************** function _ISR *****************
   838 ;; Defined at:
   839 ;;		line 39 in file "main.c"
   840 ;; Parameters:    Size  Location     Type
   841 ;;		None
   842 ;; Auto vars:     Size  Location     Type
   843 ;;		None
   844 ;; Return value:  Size  Location     Type
   845 ;;                  1    wreg      void 
   846 ;; Registers used:
   847 ;;		wreg, status,2, status,0
   848 ;; Tracked objects:
   849 ;;		On entry : 0/0
   850 ;;		On exit  : 0/0
   851 ;;		Unchanged: 0/0
   852 ;; Data sizes:     COMMON   BANK0   BANK1
   853 ;;      Params:         0       0       0
   854 ;;      Locals:         0       0       0
   855 ;;      Temps:          4       0       0
   856 ;;      Totals:         4       0       0
   857 ;;Total ram usage:        4 bytes
   858 ;; Hardware stack levels used:    1
   859 ;; This function calls:
   860 ;;		Nothing
   861 ;; This function is called by:
   862 ;;		Interrupt level 1
   863 ;; This function uses a non-reentrant model
   864 ;;
   865                           
   866                           
   867                           ;psect for function _ISR
   868  01A0                     _ISR:	
   869                           
   870                           ;main.c: 41: SEC = SEC + 1;
   871  01A0  0873               	movf	_SEC,w
   872  01A1  3E01               	addlw	1
   873  01A2  00F3               	movwf	_SEC
   874  01A3  0874               	movf	_SEC+1,w
   875  01A4  1803               	skipnc
   876  01A5  3E01               	addlw	1
   877  01A6  3E00               	addlw	0
   878  01A7  00F4               	movwf	_SEC+1
   879                           
   880                           ;main.c: 42: INTCONbits.GIE = 0;
   881  01A8  138B               	bcf	11,7	;volatile
   882                           
   883                           ;main.c: 43: INTCONbits.T0IE = 0;
   884  01A9  128B               	bcf	11,5	;volatile
   885                           
   886                           ;main.c: 44: INTCONbits.T0IF = 0;
   887  01AA  110B               	bcf	11,2	;volatile
   888  01AB  087A               	movf	??_ISR+3,w
   889  01AC  00FF               	movwf	127
   890  01AD  0879               	movf	??_ISR+2,w
   891  01AE  008A               	movwf	10
   892  01AF  0878               	movf	??_ISR+1,w
   893  01B0  0084               	movwf	4
   894  01B1  0E77               	swapf	??_ISR^(0+-128),w
   895  01B2  0083               	movwf	3
   896  01B3  0EFE               	swapf	126,f
   897  01B4  0E7E               	swapf	126,w
   898  01B5  0009               	retfie
   899  01B6                     __end_of_ISR:	
   900  007E                     btemp	set	126	;btemp
   901  007E                     wtemp0	set	126
   902                           
   903                           	psect	intentry
   904  0004                     __pintentry:	
   905                           ;incstack = 0
   906                           ; Regs used in _ISR: [wreg+status,2+status,0]
   907                           
   908  0004                     interrupt_function:	
   909  007E                     saved_w	set	btemp
   910  0004  00FE               	movwf	btemp
   911  0005  0E03               	swapf	3,w
   912  0006  00F7               	movwf	??_ISR
   913  0007  0804               	movf	4,w
   914  0008  00F8               	movwf	??_ISR+1
   915  0009  080A               	movf	10,w
   916  000A  00F9               	movwf	??_ISR+2
   917  000B  1283               	bcf	3,5	;RP0=0, select bank0
   918  000C  087F               	movf	btemp+1,w
   919  000D  00FA               	movwf	??_ISR+3
   920  000E  29A0               	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13      4      10
    BANK0            69      2       8
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_SECSTART

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     616
                           _SECSTART
 ---------------------------------------------------------------------------------
 (1) _SECSTART                                             2     0      2     616
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SECSTART

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            D      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               D      4       A       1       76.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            45      0       0       3        0.0%
BANK0               45      2       8       4       11.6%
BANK1               20      0       0       5        0.0%
ABS                  0      0      12       6        0.0%
BITBANK1            20      0       0       7        0.0%
DATA                 0      0      12       8        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Thu Nov 09 09:35:32 2017

            __CFG_CP$OFF 0000                      l961 0035                      l975 004D  
                    l989 0067                      _EMR 0020                      _SEC 0073  
           __CFG_CPD$OFF 0000                      _ISR 01A0                      fsr0 0004  
                   ?_ISR 0077                     l1001 007D                     l1101 015B  
                   l1013 00A0                     l1113 0174                     l1027 00C2  
                   l1125 018E                     l1053 00FA                     l1039 00DC  
                   l1091 0144                     l1069 0117                     l1079 012B  
                   _TMR0 0001                     _STEP 0075                     _main 001E  
                   btemp 007E            __CFG_BOREN$ON 0000                     start 000F  
          __CFG_IESO$OFF 0000            __CFG_MCLRE$ON 0000                    ??_ISR 0077  
                  ?_main 0077            __CFG_WDTE$OFF 0000                    _ANSEL 009F  
       __end_of_SECSTART 01BD            __CFG_PWRTE$ON 0000           __CFG_FCMEN$OFF 0000  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 0010             __end_of_main 01A0                   ??_main 0028  
                 _OSCCON 008F                   saved_w 007E  __end_of__initialization 001C  
              ?_SECSTART 0026           __pcstackCOMMON 0077         SECSTART@TMR0_CNT 0026  
             __pbssBANK0 0020               ??_SECSTART 0028               __pmaintext 001E  
             __pintentry 0004                  _EMR_TMR 0022                  _PTO__ON 0071  
                __ptext1 01B6                  __ptext2 01A0             __size_of_ISR 0016  
   end_of_initialization 001C        __size_of_SECSTART 0007      start_initialization 0010  
            __end_of_ISR 01B6              __pbssCOMMON 0071                ___latbits 0000  
          __pcstackBANK0 0026                 _IDLESTOP 0024        interrupt_function 0004  
               _GPIObits 0005                 _SECSTART 01B6            __size_of_main 0182  
             _INTCONbits 000B                 intlevel1 0000               _OPTION_REG 0081  
     __CFG_FOSC$INTOSCIO 0000               _TRISIObits 0085  
