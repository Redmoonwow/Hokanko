

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Nov 10 11:46:30 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	12F683
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Version 1.40
    17                           ; Generated 01/12/2016 GMT
    18                           ; 
    19                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC12F683 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  000A                     	;# 
    57  000B                     	;# 
    58  000C                     	;# 
    59  000E                     	;# 
    60  000E                     	;# 
    61  000F                     	;# 
    62  0010                     	;# 
    63  0011                     	;# 
    64  0012                     	;# 
    65  0013                     	;# 
    66  0013                     	;# 
    67  0014                     	;# 
    68  0015                     	;# 
    69  0018                     	;# 
    70  0019                     	;# 
    71  001A                     	;# 
    72  001E                     	;# 
    73  001F                     	;# 
    74  0081                     	;# 
    75  0085                     	;# 
    76  008C                     	;# 
    77  008E                     	;# 
    78  008F                     	;# 
    79  0090                     	;# 
    80  0092                     	;# 
    81  0095                     	;# 
    82  0095                     	;# 
    83  0096                     	;# 
    84  0096                     	;# 
    85  0099                     	;# 
    86  009A                     	;# 
    87  009A                     	;# 
    88  009B                     	;# 
    89  009C                     	;# 
    90  009D                     	;# 
    91  009E                     	;# 
    92  009F                     	;# 
    93                           
    94                           	psect	nvCOMMON
    95  007A                     __pnvCOMMON:	
    96  007A                     _SEC:	
    97  007A                     	ds	2
    98  0005                     _GPIObits	set	5
    99  000B                     _INTCONbits	set	11
   100  0001                     _TMR0	set	1
   101  009F                     _ANSEL	set	159
   102  0081                     _OPTION_REG	set	129
   103  008F                     _OSCCON	set	143
   104  0085                     _TRISIObits	set	133
   105                           
   106                           ; #config settings
   107  0000                     
   108                           	psect	cinit
   109  0010                     start_initialization:	
   110  0010                     __initialization:	
   111                           
   112                           ; Clear objects allocated to COMMON
   113  0010  01F0               	clrf	__pbssCOMMON& (0+127)
   114  0011  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   115  0012  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   116  0013  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   117  0014  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   118  0015  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   119                           
   120                           ; Clear objects allocated to BANK0
   121  0016  01A0               	clrf	__pbssBANK0& (0+127)
   122  0017  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   123  0018                     end_of_initialization:	
   124                           ;End of C runtime variable initialization code
   125                           
   126  0018                     __end_of__initialization:	
   127  0018  0183               	clrf	3
   128  0019  281A               	ljmp	_main	;jump to C main() function
   129                           
   130                           	psect	bssCOMMON
   131  0070                     __pbssCOMMON:	
   132  0070                     _PTO__ON:	
   133  0070                     	ds	2
   134  0072                     _STEP:	
   135  0072                     	ds	2
   136  0074                     _TRG:	
   137  0074                     	ds	2
   138                           
   139                           	psect	bssBANK0
   140  0020                     __pbssBANK0:	
   141  0020                     _IDLESTOP:	
   142  0020                     	ds	2
   143                           
   144                           	psect	cstackCOMMON
   145  0076                     __pcstackCOMMON:	
   146  0076                     ?_ISR:	
   147  0076                     ??_ISR:	
   148                           ; 1 bytes @ 0x0
   149                           
   150  0076                     ?_main:	
   151                           ; 1 bytes @ 0x0
   152                           
   153                           
   154                           ; 1 bytes @ 0x0
   155  0076                     	ds	4
   156                           
   157                           	psect	cstackBANK0
   158  0022                     __pcstackBANK0:	
   159  0022                     ?_SECSTART:	
   160  0022                     SECSTART@TMR0_CNT:	
   161                           ; 1 bytes @ 0x0
   162                           
   163                           
   164                           ; 2 bytes @ 0x0
   165  0022                     	ds	2
   166  0024                     ??_SECSTART:	
   167  0024                     ??_main:	
   168                           ; 1 bytes @ 0x2
   169                           
   170                           
   171                           	psect	maintext
   172  001A                     __pmaintext:	
   173                           ; 1 bytes @ 0x2
   174 ;;
   175 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   176 ;;
   177 ;; *************** function _main *****************
   178 ;; Defined at:
   179 ;;		line 47 in file "main.c"
   180 ;; Parameters:    Size  Location     Type
   181 ;;		None
   182 ;; Auto vars:     Size  Location     Type
   183 ;;		None
   184 ;; Return value:  Size  Location     Type
   185 ;;                  1    wreg      void 
   186 ;; Registers used:
   187 ;;		wreg, status,2, status,0, pclath, cstack
   188 ;; Tracked objects:
   189 ;;		On entry : B00/0
   190 ;;		On exit  : 0/0
   191 ;;		Unchanged: 0/0
   192 ;; Data sizes:     COMMON   BANK0   BANK1
   193 ;;      Params:         0       0       0
   194 ;;      Locals:         0       0       0
   195 ;;      Temps:          0       0       0
   196 ;;      Totals:         0       0       0
   197 ;;Total ram usage:        0 bytes
   198 ;; Hardware stack levels required when called:    2
   199 ;; This function calls:
   200 ;;		_SECSTART
   201 ;; This function is called by:
   202 ;;		Startup code after reset
   203 ;; This function uses a non-reentrant model
   204 ;;
   205                           
   206                           
   207                           ;psect for function _main
   208  001A                     _main:	
   209                           
   210                           ;main.c: 50: OSCCON = 0b00000001;
   211                           
   212                           ;incstack = 0
   213                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   214  001A  3001               	movlw	1
   215  001B  1683               	bsf	3,5	;RP0=1, select bank1
   216  001C  008F               	movwf	15	;volatile
   217                           
   218                           ;main.c: 56: OPTION_REG = 0b10000101;
   219  001D  3085               	movlw	133
   220  001E  0081               	movwf	1	;volatile
   221                           
   222                           ;main.c: 57: ANSEL = 0x00;
   223  001F  019F               	clrf	31	;volatile
   224                           
   225                           ;main.c: 58: TRISIObits.TRISIO2 = 0;
   226  0020  1105               	bcf	5,2	;volatile
   227                           
   228                           ;main.c: 59: TRISIObits.TRISIO4 = 1;
   229  0021  1605               	bsf	5,4	;volatile
   230                           
   231                           ;main.c: 60: TRISIObits.TRISIO5 = 1;
   232  0022  1685               	bsf	5,5	;volatile
   233                           
   234                           ;main.c: 61: GPIObits.GP2 = 0;
   235  0023  1283               	bcf	3,5	;RP0=0, select bank0
   236  0024  1105               	bcf	5,2	;volatile
   237                           
   238                           ;main.c: 64: SEC = 4;
   239  0025  3004               	movlw	4
   240  0026  00FA               	movwf	_SEC
   241  0027  3000               	movlw	0
   242  0028  00FB               	movwf	_SEC+1
   243                           
   244                           ;main.c: 65: STEP = 0;
   245  0029  01F2               	clrf	_STEP
   246  002A  01F3               	clrf	_STEP+1
   247                           
   248                           ;main.c: 66: PTO__ON = 0;
   249  002B  01F0               	clrf	_PTO__ON
   250  002C  01F1               	clrf	_PTO__ON+1
   251                           
   252                           ;main.c: 67: TRG = 0;
   253  002D  01F4               	clrf	_TRG
   254  002E  01F5               	clrf	_TRG+1
   255                           
   256                           ;main.c: 68: IDLESTOP = 0;
   257  002F  01A0               	clrf	_IDLESTOP
   258  0030  01A1               	clrf	_IDLESTOP+1
   259  0031                     l957:	
   260                           ;main.c: 70: for(;;){
   261                           
   262                           
   263                           ;main.c: 74: if(GPIObits.GP4 == 0 && STEP == 0 && PTO__ON == 0 && SEC == 4){
   264  0031  1A05               	btfsc	5,4	;volatile
   265  0032  284C               	goto	l973
   266  0033  0872               	movf	_STEP,w
   267  0034  0473               	iorwf	_STEP+1,w
   268  0035  1D03               	btfss	3,2
   269  0036  284C               	goto	l973
   270  0037  0870               	movf	_PTO__ON,w
   271  0038  0471               	iorwf	_PTO__ON+1,w
   272  0039  1D03               	btfss	3,2
   273  003A  284C               	goto	l973
   274  003B  3004               	movlw	4
   275  003C  067A               	xorwf	_SEC,w
   276  003D  047B               	iorwf	_SEC+1,w
   277  003E  1D03               	btfss	3,2
   278  003F  284C               	goto	l973
   279                           
   280                           ;main.c: 75: GPIObits.GP2 = 1;
   281  0040  1505               	bsf	5,2	;volatile
   282                           
   283                           ;main.c: 76: SEC = 0;
   284  0041  01FA               	clrf	_SEC
   285  0042  01FB               	clrf	_SEC+1
   286                           
   287                           ;main.c: 77: PTO__ON = 1;
   288  0043  3001               	movlw	1
   289  0044  00F0               	movwf	_PTO__ON
   290  0045  3000               	movlw	0
   291  0046  00F1               	movwf	_PTO__ON+1
   292                           
   293                           ;main.c: 78: SECSTART(232);
   294  0047  30E8               	movlw	232
   295  0048  00A2               	movwf	SECSTART@TMR0_CNT
   296  0049  3000               	movlw	0
   297  004A  00A3               	movwf	SECSTART@TMR0_CNT+1
   298  004B  21DB               	fcall	_SECSTART
   299  004C                     l973:	
   300                           
   301                           ;main.c: 79: }
   302                           ;main.c: 81: if(GPIObits.GP4 == 1 && PTO__ON == 1){
   303  004C  1283               	bcf	3,5	;RP0=0, select bank0
   304  004D  1E05               	btfss	5,4	;volatile
   305  004E  2857               	goto	l979
   306  004F  0370               	decf	_PTO__ON,w
   307  0050  0471               	iorwf	_PTO__ON+1,w
   308  0051  1D03               	btfss	3,2
   309  0052  2857               	goto	l979
   310                           
   311                           ;main.c: 82: TRG = 1;
   312  0053  3001               	movlw	1
   313  0054  00F4               	movwf	_TRG
   314  0055  3000               	movlw	0
   315  0056  00F5               	movwf	_TRG+1
   316  0057                     l979:	
   317                           
   318                           ;main.c: 83: }
   319                           ;main.c: 85: if(STEP == 0 && PTO__ON == 1 && SEC == 1){
   320  0057  0872               	movf	_STEP,w
   321  0058  0473               	iorwf	_STEP+1,w
   322  0059  1D03               	btfss	3,2
   323  005A  287F               	goto	l997
   324  005B  0370               	decf	_PTO__ON,w
   325  005C  0471               	iorwf	_PTO__ON+1,w
   326  005D  1D03               	btfss	3,2
   327  005E  287F               	goto	l997
   328  005F  037A               	decf	_SEC,w
   329  0060  047B               	iorwf	_SEC+1,w
   330  0061  1D03               	btfss	3,2
   331  0062  287F               	goto	l997
   332                           
   333                           ;main.c: 86: GPIObits.GP2 = 0;
   334  0063  1105               	bcf	5,2	;volatile
   335                           
   336                           ;main.c: 87: PTO__ON = PTO__ON + 1;
   337  0064  0870               	movf	_PTO__ON,w
   338  0065  3E01               	addlw	1
   339  0066  00F0               	movwf	_PTO__ON
   340  0067  0871               	movf	_PTO__ON+1,w
   341  0068  1803               	skipnc
   342  0069  3E01               	addlw	1
   343  006A  3E00               	addlw	0
   344  006B  00F1               	movwf	_PTO__ON+1
   345                           
   346                           ;main.c: 88: SECSTART(232);
   347  006C  30E8               	movlw	232
   348  006D  00A2               	movwf	SECSTART@TMR0_CNT
   349  006E  3000               	movlw	0
   350  006F  00A3               	movwf	SECSTART@TMR0_CNT+1
   351  0070  21DB               	fcall	_SECSTART
   352                           
   353                           ;main.c: 89: if(TRG == 1){
   354  0071  0374               	decf	_TRG,w
   355  0072  0475               	iorwf	_TRG+1,w
   356  0073  1D03               	btfss	3,2
   357  0074  287F               	goto	l997
   358                           
   359                           ;main.c: 90: PTO__ON = PTO__ON + 1;
   360  0075  0870               	movf	_PTO__ON,w
   361  0076  3E01               	addlw	1
   362  0077  00F0               	movwf	_PTO__ON
   363  0078  0871               	movf	_PTO__ON+1,w
   364  0079  1803               	skipnc
   365  007A  3E01               	addlw	1
   366  007B  3E00               	addlw	0
   367  007C  00F1               	movwf	_PTO__ON+1
   368                           
   369                           ;main.c: 91: TRG = 0;
   370  007D  01F4               	clrf	_TRG
   371  007E  01F5               	clrf	_TRG+1
   372  007F                     l997:	
   373                           
   374                           ;main.c: 92: }
   375                           ;main.c: 93: }
   376                           ;main.c: 99: if(GPIObits.GP4 == 1 && PTO__ON == 2){
   377  007F  1283               	bcf	3,5	;RP0=0, select bank0
   378  0080  1E05               	btfss	5,4	;volatile
   379  0081  288F               	goto	l37
   380  0082  3002               	movlw	2
   381  0083  0670               	xorwf	_PTO__ON,w
   382  0084  0471               	iorwf	_PTO__ON+1,w
   383  0085  1D03               	btfss	3,2
   384  0086  288F               	goto	l37
   385                           
   386                           ;main.c: 100: PTO__ON = PTO__ON + 1;;
   387  0087  0870               	movf	_PTO__ON,w
   388  0088  3E01               	addlw	1
   389  0089  00F0               	movwf	_PTO__ON
   390  008A  0871               	movf	_PTO__ON+1,w
   391  008B  1803               	skipnc
   392  008C  3E01               	addlw	1
   393  008D  3E00               	addlw	0
   394  008E  00F1               	movwf	_PTO__ON+1
   395  008F                     l37:	
   396                           
   397                           ;main.c: 101: }
   398                           ;main.c: 103: if(STEP == 0 && PTO__ON == 3 && SEC == 2){
   399  008F  0872               	movf	_STEP,w
   400  0090  0473               	iorwf	_STEP+1,w
   401  0091  1D03               	btfss	3,2
   402  0092  28AB               	goto	l1013
   403  0093  3003               	movlw	3
   404  0094  0670               	xorwf	_PTO__ON,w
   405  0095  0471               	iorwf	_PTO__ON+1,w
   406  0096  1D03               	btfss	3,2
   407  0097  28AB               	goto	l1013
   408  0098  3002               	movlw	2
   409  0099  067A               	xorwf	_SEC,w
   410  009A  047B               	iorwf	_SEC+1,w
   411  009B  1D03               	btfss	3,2
   412  009C  28AB               	goto	l1013
   413                           
   414                           ;main.c: 104: GPIObits.GP2 = 1;
   415  009D  1505               	bsf	5,2	;volatile
   416                           
   417                           ;main.c: 105: PTO__ON = PTO__ON + 1;
   418  009E  0870               	movf	_PTO__ON,w
   419  009F  3E01               	addlw	1
   420  00A0  00F0               	movwf	_PTO__ON
   421  00A1  0871               	movf	_PTO__ON+1,w
   422  00A2  1803               	skipnc
   423  00A3  3E01               	addlw	1
   424  00A4  3E00               	addlw	0
   425  00A5  00F1               	movwf	_PTO__ON+1
   426                           
   427                           ;main.c: 106: SECSTART(232);
   428  00A6  30E8               	movlw	232
   429  00A7  00A2               	movwf	SECSTART@TMR0_CNT
   430  00A8  3000               	movlw	0
   431  00A9  00A3               	movwf	SECSTART@TMR0_CNT+1
   432  00AA  21DB               	fcall	_SECSTART
   433  00AB                     l1013:	
   434                           
   435                           ;main.c: 107: }
   436                           ;main.c: 109: if(STEP == 0 && PTO__ON == 4 && SEC == 3){
   437  00AB  0872               	movf	_STEP,w
   438  00AC  0473               	iorwf	_STEP+1,w
   439  00AD  1D03               	btfss	3,2
   440  00AE  28C8               	goto	l1025
   441  00AF  3004               	movlw	4
   442  00B0  0670               	xorwf	_PTO__ON,w
   443  00B1  0471               	iorwf	_PTO__ON+1,w
   444  00B2  1D03               	btfss	3,2
   445  00B3  28C8               	goto	l1025
   446  00B4  3003               	movlw	3
   447  00B5  067A               	xorwf	_SEC,w
   448  00B6  047B               	iorwf	_SEC+1,w
   449  00B7  1D03               	btfss	3,2
   450  00B8  28C8               	goto	l1025
   451                           
   452                           ;main.c: 110: GPIObits.GP2 = 0;
   453  00B9  1283               	bcf	3,5	;RP0=0, select bank0
   454  00BA  1105               	bcf	5,2	;volatile
   455                           
   456                           ;main.c: 111: PTO__ON = PTO__ON + 1;
   457  00BB  0870               	movf	_PTO__ON,w
   458  00BC  3E01               	addlw	1
   459  00BD  00F0               	movwf	_PTO__ON
   460  00BE  0871               	movf	_PTO__ON+1,w
   461  00BF  1803               	skipnc
   462  00C0  3E01               	addlw	1
   463  00C1  3E00               	addlw	0
   464  00C2  00F1               	movwf	_PTO__ON+1
   465                           
   466                           ;main.c: 112: SECSTART(232);
   467  00C3  30E8               	movlw	232
   468  00C4  00A2               	movwf	SECSTART@TMR0_CNT
   469  00C5  3000               	movlw	0
   470  00C6  00A3               	movwf	SECSTART@TMR0_CNT+1
   471  00C7  21DB               	fcall	_SECSTART
   472  00C8                     l1025:	
   473                           
   474                           ;main.c: 113: }
   475                           ;main.c: 115: if(GPIObits.GP4 == 1 && PTO__ON == 5 && SEC == 4){
   476  00C8  1283               	bcf	3,5	;RP0=0, select bank0
   477  00C9  1E05               	btfss	5,4	;volatile
   478  00CA  28D7               	goto	l1033
   479  00CB  3005               	movlw	5
   480  00CC  0670               	xorwf	_PTO__ON,w
   481  00CD  0471               	iorwf	_PTO__ON+1,w
   482  00CE  1D03               	btfss	3,2
   483  00CF  28D7               	goto	l1033
   484  00D0  3004               	movlw	4
   485  00D1  067A               	xorwf	_SEC,w
   486  00D2  047B               	iorwf	_SEC+1,w
   487  00D3  1D03               	btfss	3,2
   488  00D4  28D7               	goto	l1033
   489                           
   490                           ;main.c: 116: PTO__ON = 0;
   491  00D5  01F0               	clrf	_PTO__ON
   492  00D6  01F1               	clrf	_PTO__ON+1
   493  00D7                     l1033:	
   494                           
   495                           ;main.c: 117: }
   496                           ;main.c: 124: if(GPIObits.GP5 == 0 && STEP == 0 && SEC == 4 && TRG == 0 && PTO__ON == 0)
      +                          {
   497  00D7  1A85               	btfsc	5,5	;volatile
   498  00D8  28FE               	goto	l1053
   499  00D9  0872               	movf	_STEP,w
   500  00DA  0473               	iorwf	_STEP+1,w
   501  00DB  1D03               	btfss	3,2
   502  00DC  28FE               	goto	l1053
   503  00DD  3004               	movlw	4
   504  00DE  067A               	xorwf	_SEC,w
   505  00DF  047B               	iorwf	_SEC+1,w
   506  00E0  1D03               	btfss	3,2
   507  00E1  28FE               	goto	l1053
   508  00E2  0874               	movf	_TRG,w
   509  00E3  0475               	iorwf	_TRG+1,w
   510  00E4  1D03               	btfss	3,2
   511  00E5  28FE               	goto	l1053
   512  00E6  0870               	movf	_PTO__ON,w
   513  00E7  0471               	iorwf	_PTO__ON+1,w
   514  00E8  1D03               	btfss	3,2
   515  00E9  28FE               	goto	l1053
   516                           
   517                           ;main.c: 125: GPIObits.GP2 = 1;
   518  00EA  1505               	bsf	5,2	;volatile
   519                           
   520                           ;main.c: 126: SEC = 0;
   521  00EB  01FA               	clrf	_SEC
   522  00EC  01FB               	clrf	_SEC+1
   523                           
   524                           ;main.c: 127: TRG = 1;
   525  00ED  3001               	movlw	1
   526  00EE  00F4               	movwf	_TRG
   527  00EF  3000               	movlw	0
   528  00F0  00F5               	movwf	_TRG+1
   529                           
   530                           ;main.c: 128: STEP = STEP + 1;
   531  00F1  0872               	movf	_STEP,w
   532  00F2  3E01               	addlw	1
   533  00F3  00F2               	movwf	_STEP
   534  00F4  0873               	movf	_STEP+1,w
   535  00F5  1803               	skipnc
   536  00F6  3E01               	addlw	1
   537  00F7  3E00               	addlw	0
   538  00F8  00F3               	movwf	_STEP+1
   539                           
   540                           ;main.c: 129: SECSTART(232);
   541  00F9  30E8               	movlw	232
   542  00FA  00A2               	movwf	SECSTART@TMR0_CNT
   543  00FB  3000               	movlw	0
   544  00FC  00A3               	movwf	SECSTART@TMR0_CNT+1
   545  00FD  21DB               	fcall	_SECSTART
   546  00FE                     l1053:	
   547                           
   548                           ;main.c: 130: }
   549                           ;main.c: 132: if(GPIObits.GP5 == 1 && STEP == 1 && PTO__ON == 0){
   550  00FE  1283               	bcf	3,5	;RP0=0, select bank0
   551  00FF  1E85               	btfss	5,5	;volatile
   552  0100  2911               	goto	l42
   553  0101  0372               	decf	_STEP,w
   554  0102  0473               	iorwf	_STEP+1,w
   555  0103  1D03               	btfss	3,2
   556  0104  2911               	goto	l42
   557  0105  0870               	movf	_PTO__ON,w
   558  0106  0471               	iorwf	_PTO__ON+1,w
   559  0107  1D03               	btfss	3,2
   560  0108  2911               	goto	l42
   561                           
   562                           ;main.c: 133: STEP = STEP + 1;
   563  0109  0872               	movf	_STEP,w
   564  010A  3E01               	addlw	1
   565  010B  00F2               	movwf	_STEP
   566  010C  0873               	movf	_STEP+1,w
   567  010D  1803               	skipnc
   568  010E  3E01               	addlw	1
   569  010F  3E00               	addlw	0
   570  0110  00F3               	movwf	_STEP+1
   571  0111                     l42:	
   572                           
   573                           ;main.c: 134: }
   574                           ;main.c: 136: if(SEC == 1 && STEP == 2 && PTO__ON == 0){
   575  0111  037A               	decf	_SEC,w
   576  0112  047B               	iorwf	_SEC+1,w
   577  0113  1D03               	btfss	3,2
   578  0114  292E               	goto	l1073
   579  0115  3002               	movlw	2
   580  0116  0672               	xorwf	_STEP,w
   581  0117  0473               	iorwf	_STEP+1,w
   582  0118  1D03               	btfss	3,2
   583  0119  292E               	goto	l1073
   584  011A  0870               	movf	_PTO__ON,w
   585  011B  0471               	iorwf	_PTO__ON+1,w
   586  011C  1D03               	btfss	3,2
   587  011D  292E               	goto	l1073
   588                           
   589                           ;main.c: 137: GPIObits.GP2 = 0;
   590  011E  1105               	bcf	5,2	;volatile
   591                           
   592                           ;main.c: 138: TRG = 0;
   593  011F  01F4               	clrf	_TRG
   594  0120  01F5               	clrf	_TRG+1
   595                           
   596                           ;main.c: 139: STEP = STEP + 1;
   597  0121  0872               	movf	_STEP,w
   598  0122  3E01               	addlw	1
   599  0123  00F2               	movwf	_STEP
   600  0124  0873               	movf	_STEP+1,w
   601  0125  1803               	skipnc
   602  0126  3E01               	addlw	1
   603  0127  3E00               	addlw	0
   604  0128  00F3               	movwf	_STEP+1
   605                           
   606                           ;main.c: 140: SECSTART(232);
   607  0129  30E8               	movlw	232
   608  012A  00A2               	movwf	SECSTART@TMR0_CNT
   609  012B  3000               	movlw	0
   610  012C  00A3               	movwf	SECSTART@TMR0_CNT+1
   611  012D  21DB               	fcall	_SECSTART
   612  012E                     l1073:	
   613                           
   614                           ;main.c: 141: }
   615                           ;main.c: 143: if(GPIObits.GP5 == 1 && SEC == 2 && STEP == 3 && PTO__ON == 0){
   616  012E  1283               	bcf	3,5	;RP0=0, select bank0
   617  012F  1E85               	btfss	5,5	;volatile
   618  0130  2947               	goto	l1083
   619  0131  3002               	movlw	2
   620  0132  067A               	xorwf	_SEC,w
   621  0133  047B               	iorwf	_SEC+1,w
   622  0134  1D03               	btfss	3,2
   623  0135  2947               	goto	l1083
   624  0136  3003               	movlw	3
   625  0137  0672               	xorwf	_STEP,w
   626  0138  0473               	iorwf	_STEP+1,w
   627  0139  1D03               	btfss	3,2
   628  013A  2947               	goto	l1083
   629  013B  0870               	movf	_PTO__ON,w
   630  013C  0471               	iorwf	_PTO__ON+1,w
   631  013D  1D03               	btfss	3,2
   632  013E  2947               	goto	l1083
   633                           
   634                           ;main.c: 144: STEP = STEP + 1;
   635  013F  0872               	movf	_STEP,w
   636  0140  3E01               	addlw	1
   637  0141  00F2               	movwf	_STEP
   638  0142  0873               	movf	_STEP+1,w
   639  0143  1803               	skipnc
   640  0144  3E01               	addlw	1
   641  0145  3E00               	addlw	0
   642  0146  00F3               	movwf	_STEP+1
   643  0147                     l1083:	
   644                           
   645                           ;main.c: 145: }
   646                           ;main.c: 149: if(GPIObits.GP4 == 0 && STEP == 4 && PTO__ON == 0){
   647  0147  1A05               	btfsc	5,4	;volatile
   648  0148  2956               	goto	l1091
   649  0149  3004               	movlw	4
   650  014A  0672               	xorwf	_STEP,w
   651  014B  0473               	iorwf	_STEP+1,w
   652  014C  1D03               	btfss	3,2
   653  014D  2956               	goto	l1091
   654  014E  0870               	movf	_PTO__ON,w
   655  014F  0471               	iorwf	_PTO__ON+1,w
   656  0150  1D03               	btfss	3,2
   657  0151  2956               	goto	l1091
   658                           
   659                           ;main.c: 150: PTO__ON = 1;
   660  0152  3001               	movlw	1
   661  0153  00F0               	movwf	_PTO__ON
   662  0154  3000               	movlw	0
   663  0155  00F1               	movwf	_PTO__ON+1
   664  0156                     l1091:	
   665                           
   666                           ;main.c: 151: }
   667                           ;main.c: 153: if(GPIObits.GP4 == 1 && STEP == 4 & PTO__ON == 1){
   668  0156  1E05               	btfss	5,4	;volatile
   669  0157  2963               	goto	l1099
   670  0158  3004               	movlw	4
   671  0159  0672               	xorwf	_STEP,w
   672  015A  0473               	iorwf	_STEP+1,w
   673  015B  1D03               	btfss	3,2
   674  015C  2963               	goto	l1099
   675  015D  0370               	decf	_PTO__ON,w
   676  015E  0471               	iorwf	_PTO__ON+1,w
   677  015F  1D03               	btfss	3,2
   678  0160  2963               	goto	l1099
   679                           
   680                           ;main.c: 154: PTO__ON = 0;
   681  0161  01F0               	clrf	_PTO__ON
   682  0162  01F1               	clrf	_PTO__ON+1
   683  0163                     l1099:	
   684                           
   685                           ;main.c: 155: }
   686                           ;main.c: 158: if(GPIObits.GP5 == 0 && STEP == 4 && SEC == 2 && PTO__ON == 0){
   687  0163  1A85               	btfsc	5,5	;volatile
   688  0164  2981               	goto	l1113
   689  0165  3004               	movlw	4
   690  0166  0672               	xorwf	_STEP,w
   691  0167  0473               	iorwf	_STEP+1,w
   692  0168  1D03               	btfss	3,2
   693  0169  2981               	goto	l1113
   694  016A  3002               	movlw	2
   695  016B  067A               	xorwf	_SEC,w
   696  016C  047B               	iorwf	_SEC+1,w
   697  016D  1D03               	btfss	3,2
   698  016E  2981               	goto	l1113
   699  016F  0870               	movf	_PTO__ON,w
   700  0170  0471               	iorwf	_PTO__ON+1,w
   701  0171  1D03               	btfss	3,2
   702  0172  2981               	goto	l1113
   703                           
   704                           ;main.c: 159: GPIObits.GP2 = 1;
   705  0173  1505               	bsf	5,2	;volatile
   706                           
   707                           ;main.c: 160: STEP = STEP + 1;
   708  0174  0872               	movf	_STEP,w
   709  0175  3E01               	addlw	1
   710  0176  00F2               	movwf	_STEP
   711  0177  0873               	movf	_STEP+1,w
   712  0178  1803               	skipnc
   713  0179  3E01               	addlw	1
   714  017A  3E00               	addlw	0
   715  017B  00F3               	movwf	_STEP+1
   716                           
   717                           ;main.c: 161: SECSTART(232);
   718  017C  30E8               	movlw	232
   719  017D  00A2               	movwf	SECSTART@TMR0_CNT
   720  017E  3000               	movlw	0
   721  017F  00A3               	movwf	SECSTART@TMR0_CNT+1
   722  0180  21DB               	fcall	_SECSTART
   723  0181                     l1113:	
   724                           
   725                           ;main.c: 162: }
   726                           ;main.c: 164: if(GPIObits.GP5 == 1 && STEP == 5 && PTO__ON == 0){
   727  0181  1283               	bcf	3,5	;RP0=0, select bank0
   728  0182  1E85               	btfss	5,5	;volatile
   729  0183  2995               	goto	l48
   730  0184  3005               	movlw	5
   731  0185  0672               	xorwf	_STEP,w
   732  0186  0473               	iorwf	_STEP+1,w
   733  0187  1D03               	btfss	3,2
   734  0188  2995               	goto	l48
   735  0189  0870               	movf	_PTO__ON,w
   736  018A  0471               	iorwf	_PTO__ON+1,w
   737  018B  1D03               	btfss	3,2
   738  018C  2995               	goto	l48
   739                           
   740                           ;main.c: 165: STEP = STEP + 1;
   741  018D  0872               	movf	_STEP,w
   742  018E  3E01               	addlw	1
   743  018F  00F2               	movwf	_STEP
   744  0190  0873               	movf	_STEP+1,w
   745  0191  1803               	skipnc
   746  0192  3E01               	addlw	1
   747  0193  3E00               	addlw	0
   748  0194  00F3               	movwf	_STEP+1
   749  0195                     l48:	
   750                           
   751                           ;main.c: 166: }
   752                           ;main.c: 168: if(SEC == 3 && STEP == 6 && PTO__ON == 0){
   753  0195  3003               	movlw	3
   754  0196  067A               	xorwf	_SEC,w
   755  0197  047B               	iorwf	_SEC+1,w
   756  0198  1D03               	btfss	3,2
   757  0199  29B1               	goto	l1131
   758  019A  3006               	movlw	6
   759  019B  0672               	xorwf	_STEP,w
   760  019C  0473               	iorwf	_STEP+1,w
   761  019D  1D03               	btfss	3,2
   762  019E  29B1               	goto	l1131
   763  019F  0870               	movf	_PTO__ON,w
   764  01A0  0471               	iorwf	_PTO__ON+1,w
   765  01A1  1D03               	btfss	3,2
   766  01A2  29B1               	goto	l1131
   767                           
   768                           ;main.c: 169: GPIObits.GP2 = 0;
   769  01A3  1105               	bcf	5,2	;volatile
   770                           
   771                           ;main.c: 170: STEP = STEP +1;
   772  01A4  0872               	movf	_STEP,w
   773  01A5  3E01               	addlw	1
   774  01A6  00F2               	movwf	_STEP
   775  01A7  0873               	movf	_STEP+1,w
   776  01A8  1803               	skipnc
   777  01A9  3E01               	addlw	1
   778  01AA  3E00               	addlw	0
   779  01AB  00F3               	movwf	_STEP+1
   780                           
   781                           ;main.c: 171: SECSTART(232);
   782  01AC  30E8               	movlw	232
   783  01AD  00A2               	movwf	SECSTART@TMR0_CNT
   784  01AE  3000               	movlw	0
   785  01AF  00A3               	movwf	SECSTART@TMR0_CNT+1
   786  01B0  21DB               	fcall	_SECSTART
   787  01B1                     l1131:	
   788                           
   789                           ;main.c: 172: }
   790                           ;main.c: 174: if(GPIObits.GP5 == 1 && SEC == 4 && STEP == 7 && PTO__ON == 0){
   791  01B1  1283               	bcf	3,5	;RP0=0, select bank0
   792  01B2  1E85               	btfss	5,5	;volatile
   793  01B3  2831               	goto	l957
   794  01B4  3004               	movlw	4
   795  01B5  067A               	xorwf	_SEC,w
   796  01B6  047B               	iorwf	_SEC+1,w
   797  01B7  1D03               	btfss	3,2
   798  01B8  2831               	goto	l957
   799  01B9  3007               	movlw	7
   800  01BA  0672               	xorwf	_STEP,w
   801  01BB  0473               	iorwf	_STEP+1,w
   802  01BC  1D03               	btfss	3,2
   803  01BD  2831               	goto	l957
   804  01BE  0870               	movf	_PTO__ON,w
   805  01BF  0471               	iorwf	_PTO__ON+1,w
   806  01C0  1D03               	btfss	3,2
   807  01C1  2831               	goto	l957
   808                           
   809                           ;main.c: 175: STEP = 0;
   810  01C2  01F2               	clrf	_STEP
   811  01C3  01F3               	clrf	_STEP+1
   812                           
   813                           ;main.c: 176: }
   814                           ;main.c: 180: }
   815  01C4  2831               	goto	l957
   816  01C5                     __end_of_main:	
   817                           ;main.c: 181: return;
   818                           
   819                           
   820                           	psect	text1
   821  01DB                     __ptext1:	
   822 ;; *************** function _SECSTART *****************
   823 ;; Defined at:
   824 ;;		line 184 in file "main.c"
   825 ;; Parameters:    Size  Location     Type
   826 ;;  TMR0_CNT        2    0[BANK0 ] int 
   827 ;; Auto vars:     Size  Location     Type
   828 ;;		None
   829 ;; Return value:  Size  Location     Type
   830 ;;                  1    wreg      void 
   831 ;; Registers used:
   832 ;;		wreg
   833 ;; Tracked objects:
   834 ;;		On entry : 0/0
   835 ;;		On exit  : 0/0
   836 ;;		Unchanged: 0/0
   837 ;; Data sizes:     COMMON   BANK0   BANK1
   838 ;;      Params:         0       2       0
   839 ;;      Locals:         0       0       0
   840 ;;      Temps:          0       0       0
   841 ;;      Totals:         0       2       0
   842 ;;Total ram usage:        2 bytes
   843 ;; Hardware stack levels used:    1
   844 ;; Hardware stack levels required when called:    1
   845 ;; This function calls:
   846 ;;		Nothing
   847 ;; This function is called by:
   848 ;;		_main
   849 ;; This function uses a non-reentrant model
   850 ;;
   851                           
   852                           
   853                           ;psect for function _SECSTART
   854  01DB                     _SECSTART:	
   855                           
   856                           ;main.c: 185: TMR0 = TMR0_CNT;
   857                           
   858                           ;incstack = 0
   859                           ; Regs used in _SECSTART: [wreg]
   860  01DB  1283               	bcf	3,5	;RP0=0, select bank0
   861  01DC  0822               	movf	SECSTART@TMR0_CNT,w
   862  01DD  0081               	movwf	1	;volatile
   863                           
   864                           ;main.c: 186: INTCONbits.GIE = 1;
   865  01DE  178B               	bsf	11,7	;volatile
   866                           
   867                           ;main.c: 187: INTCONbits.T0IF = 0;
   868  01DF  110B               	bcf	11,2	;volatile
   869                           
   870                           ;main.c: 188: INTCONbits.T0IE = 1;
   871  01E0  168B               	bsf	11,5	;volatile
   872  01E1  0008               	return
   873  01E2                     __end_of_SECSTART:	
   874                           
   875                           	psect	text2
   876  01C5                     __ptext2:	
   877 ;; *************** function _ISR *****************
   878 ;; Defined at:
   879 ;;		line 38 in file "main.c"
   880 ;; Parameters:    Size  Location     Type
   881 ;;		None
   882 ;; Auto vars:     Size  Location     Type
   883 ;;		None
   884 ;; Return value:  Size  Location     Type
   885 ;;                  1    wreg      void 
   886 ;; Registers used:
   887 ;;		wreg, status,2, status,0
   888 ;; Tracked objects:
   889 ;;		On entry : 0/0
   890 ;;		On exit  : 0/0
   891 ;;		Unchanged: 0/0
   892 ;; Data sizes:     COMMON   BANK0   BANK1
   893 ;;      Params:         0       0       0
   894 ;;      Locals:         0       0       0
   895 ;;      Temps:          4       0       0
   896 ;;      Totals:         4       0       0
   897 ;;Total ram usage:        4 bytes
   898 ;; Hardware stack levels used:    1
   899 ;; This function calls:
   900 ;;		Nothing
   901 ;; This function is called by:
   902 ;;		Interrupt level 1
   903 ;; This function uses a non-reentrant model
   904 ;;
   905                           
   906                           
   907                           ;psect for function _ISR
   908  01C5                     _ISR:	
   909                           
   910                           ;main.c: 40: SEC = SEC + 1;
   911  01C5  087A               	movf	_SEC,w
   912  01C6  3E01               	addlw	1
   913  01C7  00FA               	movwf	_SEC
   914  01C8  087B               	movf	_SEC+1,w
   915  01C9  1803               	skipnc
   916  01CA  3E01               	addlw	1
   917  01CB  3E00               	addlw	0
   918  01CC  00FB               	movwf	_SEC+1
   919                           
   920                           ;main.c: 41: INTCONbits.GIE = 0;
   921  01CD  138B               	bcf	11,7	;volatile
   922                           
   923                           ;main.c: 42: INTCONbits.T0IE = 0;
   924  01CE  128B               	bcf	11,5	;volatile
   925                           
   926                           ;main.c: 43: INTCONbits.T0IF = 0;
   927  01CF  110B               	bcf	11,2	;volatile
   928  01D0  0879               	movf	??_ISR+3,w
   929  01D1  00FF               	movwf	127
   930  01D2  0878               	movf	??_ISR+2,w
   931  01D3  008A               	movwf	10
   932  01D4  0877               	movf	??_ISR+1,w
   933  01D5  0084               	movwf	4
   934  01D6  0E76               	swapf	??_ISR^(0+-128),w
   935  01D7  0083               	movwf	3
   936  01D8  0EFE               	swapf	126,f
   937  01D9  0E7E               	swapf	126,w
   938  01DA  0009               	retfie
   939  01DB                     __end_of_ISR:	
   940  007E                     btemp	set	126	;btemp
   941  007E                     wtemp0	set	126
   942                           
   943                           	psect	intentry
   944  0004                     __pintentry:	
   945                           ;incstack = 0
   946                           ; Regs used in _ISR: [wreg+status,2+status,0]
   947                           
   948  0004                     interrupt_function:	
   949  007E                     saved_w	set	btemp
   950  0004  00FE               	movwf	btemp
   951  0005  0E03               	swapf	3,w
   952  0006  00F6               	movwf	??_ISR
   953  0007  0804               	movf	4,w
   954  0008  00F7               	movwf	??_ISR+1
   955  0009  080A               	movf	10,w
   956  000A  00F8               	movwf	??_ISR+2
   957  000B  1283               	bcf	3,5	;RP0=0, select bank0
   958  000C  087F               	movf	btemp+1,w
   959  000D  00F9               	movwf	??_ISR+3
   960  000E  29C5               	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         8
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4      12
    BANK0            80      2       4
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_SECSTART

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     551
                           _SECSTART
 ---------------------------------------------------------------------------------
 (1) _SECSTART                                             2     0      2     551
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SECSTART

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      4       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      2       4       4        5.0%
BANK1               20      0       0       5        0.0%
ABS                  0      0      10       6        0.0%
BITBANK1            20      0       0       7        0.0%
DATA                 0      0      10       8        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Nov 10 11:46:30 2017

            __CFG_CP$OFF 0000                       l42 0111                       l37 008F  
                     l48 0195                      l973 004C                      l957 0031  
                    l979 0057                      l997 007F                      _SEC 007A  
           __CFG_CPD$OFF 0000                      _ISR 01C5                      _TRG 0074  
                    fsr0 0004                     ?_ISR 0076                     l1013 00AB  
                   l1113 0181                     l1033 00D7                     l1025 00C8  
                   l1131 01B1                     l1053 00FE                     l1073 012E  
                   l1091 0156                     l1083 0147                     l1099 0163  
                   _TMR0 0001                     _STEP 0072                     _main 001A  
                   btemp 007E            __CFG_BOREN$ON 0000                     start 000F  
          __CFG_IESO$OFF 0000            __CFG_MCLRE$ON 0000                    ??_ISR 0076  
                  ?_main 0076            __CFG_WDTE$OFF 0000                    _ANSEL 009F  
       __end_of_SECSTART 01E2            __CFG_PWRTE$ON 0000           __CFG_FCMEN$OFF 0000  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 0010             __end_of_main 01C5                   ??_main 0024  
                 _OSCCON 008F                   saved_w 007E  __end_of__initialization 0018  
              ?_SECSTART 0022           __pcstackCOMMON 0076         SECSTART@TMR0_CNT 0022  
             __pbssBANK0 0020               __pnvCOMMON 007A               ??_SECSTART 0024  
             __pmaintext 001A               __pintentry 0004                  _PTO__ON 0070  
                __ptext1 01DB                  __ptext2 01C5             __size_of_ISR 0016  
   end_of_initialization 0018        __size_of_SECSTART 0007      start_initialization 0010  
            __end_of_ISR 01DB              __pbssCOMMON 0070                ___latbits 0000  
          __pcstackBANK0 0022                 _IDLESTOP 0020        interrupt_function 0004  
               _GPIObits 0005                 _SECSTART 01DB            __size_of_main 01AB  
             _INTCONbits 000B                 intlevel1 0000               _OPTION_REG 0081  
     __CFG_FOSC$INTOSCIO 0000               _TRISIObits 0085  
